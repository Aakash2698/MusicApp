// var doCache = false;

// // Name our cache
// var CACHE_NAME = "my-pwa-cache-v1";
// // let cacheData = "musicV1";

// // self.addEventListener("install", (event) => {
// //   event.waitUntil(
// //     caches.open(cacheData).then((cache) => {
// //       cache.addAll([
// //         "https://code.jquery.com/jquery-3.4.1.min.js",
// //         "/static/js/0.chunk.js",
// //         "/static/js/bundle.js",
// //         " /static/js/main.chunk.js",
// //         "/logo192.png",
// //         "/manifest.json",
// //         "/favicon.ico",
// //         "localhost",
// //         "/sockjs-node",
// //       ]);
// //     })
// //   );
// // });

// // self.addEventListener("fetch", (event) => {
// //   event.respondWith(
// //     caches.match(event.request).then((result) => {
// //       if (result) {
// //         return result;
// //       }
// //     })
// //   );
// // });

// // Delete old caches that are not our current one!
// self.addEventListener("activate", (event) => {
//   const cacheWhitelist = [CACHE_NAME];
//   event.waitUntil(
//     caches.keys().then((keyList) =>
//       Promise.all(
//         keyList.map((key) => {
//           if (!cacheWhitelist.includes(key)) {
//             console.log("Deleting cache: " + key);
//             return caches.delete(key);
//           }
//         })
//       )
//     )
//   );
// });

// // // The first time the user starts up the PWA, 'install' is triggered.
// self.addEventListener("install", function (event) {
//   if (doCache) {
//     event.waitUntil(
//       caches.open(CACHE_NAME).then(function (cache) {
//         // Get the assets manifest so we can see what our js file is named
//         // This is because webpack hashes it
//         fetch("asset-manifest.json")
//           .then((response) => {
//             response.json();
//           })
//           .then((assets) => {
//             // Open a cache and cache our files
//             // We want to cache the page and the main.js generated by webpack
//             // We could also cache any static assets like CSS or images
//             const urlsToCache = ["/", assets["main.js"]];
//             cache.addAll(urlsToCache);
//             console.log("cached");
//           });
//       })
//     );
//   }
// });

// // // When the webpage goes to fetch files, we intercept that request and serve up the matching files
// // if we have them
// self.addEventListener("fetch", function (event) {
//   if (doCache) {
//     event.respondWith(
//       caches.match(event.request).then(function (response) {
//         return response || fetch(event.request);
//       })
//     );
//   }
// });

const CACHE_VERSION = 10;
const CURRENT_CACHE = `main-${CACHE_VERSION}`;

// these are the routes we are going to cache for offline support
const cacheFiles = ["/", "/about-me/", "/projects/", "/offline/"];

// on activation we clean up the previously registered service workers
self.addEventListener("activate", (evt) =>
  evt.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CURRENT_CACHE) {
            return caches.delete(cacheName);
          }
        })
      );
    })
  )
);

// on install we download the routes we want to cache for offline
self.addEventListener("install", (evt) =>
  evt.waitUntil(
    caches.open(CURRENT_CACHE).then((cache) => {
      return cache.addAll(cacheFiles);
    })
  )
);

// fetch the resource from the network
const fromNetwork = (request, timeout) =>
  new Promise((fulfill, reject) => {
    const timeoutId = setTimeout(reject, timeout);
    fetch(request).then((response) => {
      clearTimeout(timeoutId);
      fulfill(response);
      update(request);
    }, reject);
  });

// fetch the resource from the browser cache
const fromCache = (request) =>
  caches
    .open(CURRENT_CACHE)
    .then((cache) =>
      cache
        .match(request)
        .then((matching) => matching || cache.match("/offline/"))
    );

// cache the current page to make it available for offline
const update = (request) =>
  caches
    .open(CURRENT_CACHE)
    .then((cache) =>
      fetch(request).then((response) => cache.put(request, response))
    );

// general strategy when making a request (eg if online try to fetch it
// from the network with a timeout, if something fails serve from cache)
self.addEventListener("fetch", (evt) => {
  evt.respondWith(
    fromNetwork(evt.request, 10000).catch(() => fromCache(evt.request))
  );
  evt.waitUntil(update(evt.request));
});
