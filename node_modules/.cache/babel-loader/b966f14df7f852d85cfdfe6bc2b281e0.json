{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/akashsuryavanshi/Dropbox/My Mac (Akashs-iMac.local)/Documents/Tunex Workspace/Git Repo/MusicApp/src/Components/WrapperComponents/Audio/Audio.jsx\";\nimport React, { Component } from \"react\";\nimport \"./Audio.scss\";\nimport AudioPlayer, { RHAP_UI } from \"react-h5-audio-player\";\nimport \"react-h5-audio-player/lib/styles.css\";\nimport ReactAudioPlayer from \"react-audio-player\";\nimport songImage from \"../../../Assets/image/sliderImage/1.jpg\";\nimport { Icon, InlineIcon } from \"@iconify/react\";\nimport mdPlay from \"@iconify-icons/ion/md-play\";\nimport mdSync from \"@iconify-icons/ion/md-sync\";\nimport musicalNote from \"@iconify-icons/ion/musical-note\";\nimport music from \"../../../Assets/Musics/test.mp3\";\nimport mdVolumeLow from \"@iconify-icons/ion/md-volume-low\";\nimport ActionPopover from \"../../ReusableComponents/ActionPopover/ActionPopover\";\nimport { connect } from \"react-redux\";\nimport { normalizeUnits } from \"moment\";\nimport { getActiveIndex, downloadSong } from \"../../../Actions\";\nimport logger from \"redux-logger\";\nimport axios from \"axios\";\nimport defaultImage from \"../../../Assets/defaultSong.jpg\";\n\nclass Audio extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dropdownExpand: false,\n      volumeSlider: false,\n      closeAudioControl: false,\n      index: 0,\n      onPlay: \"\",\n      songName: \"\",\n      songArtist: \"\",\n      songImage: defaultImage,\n      songUrl: \"\",\n      shuffle: false,\n      playSongs: [],\n      prevIndex: [],\n      shuffleIndex: 1,\n      incrementShuffle: 0\n    };\n\n    this.handleDropdownChange = () => {\n      this.setState({\n        dropdownExpand: !this.state.dropdownExpand\n      });\n    };\n\n    this.openVolumeSlider = () => {\n      this.setState({\n        volumeSlider: !this.state.volumeSlider\n      });\n    };\n\n    this.popupActionClick = e => {\n      if (this.node.contains(e.target)) {\n        this.setState({\n          closeAudioControl: true\n        });\n        return true;\n      }\n\n      this.setState({\n        closeAudioControl: false\n      });\n    };\n\n    this.getSongsData = nextProps => {\n      if (nextProps.currentIndex) {\n        this.setState({\n          playSongs: nextProps.currentSongData,\n          index: nextProps.currentIndex\n        }, () => {\n          var target = nextProps.currentSongData.find(temp => temp._id == this.state.index);\n          this.setState({\n            onPlay: target.songUrl,\n            songName: target.songName,\n            songArtist: target.artistName,\n            songImage: target.songImage,\n            songUrl: target._id\n          }, () => {\n            console.log(\"asasasasas\");\n            console.log(this.state.playSongs, this.state.index);\n            this.props.getActiveIndex(this.state.index, this.state.playSongs);\n          });\n        });\n      } else {// this.setState(\n        //   {\n        //     playSongs: nextProps.currentSongData,\n        //     index: nextProps.currentSongData[0]._id,\n        //   },\n        //   () => {\n        //     var target = nextProps.currentSongData.find(\n        //       (temp) => temp._id == this.state.index\n        //     );\n        //     this.setState(\n        //       {\n        //         onPlay: target.songUrl,\n        //         songName: target.songName,\n        //         songArtist: target.artistName,\n        //         songImage: target.songImage,\n        //         songUrl: target._id,\n        //       },\n        //       () => {\n        //         this.props.getActiveIndex(this.state.index, this.state.playSongs);\n        //       }\n        //     );\n        //   }\n        // );\n      }\n    };\n  }\n\n  componentWillMount() {\n    document.addEventListener(\"mousedown\", this.popupActionClick, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.popupActionClick, false);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.getSongsData(nextProps);\n  }\n\n  // nextSong = () => {\n  //   if (this.state.shuffle) {\n  //     const shuffleValue = Math.floor(\n  //       Math.random(0, this.state.playSongs.length) * 10\n  //     );\n  //     if (!this.state.prevIndex.includes(shuffleValue)) {\n  //       this.setState(\n  //         {\n  //           prevIndex: this.state.prevIndex.concat(shuffleValue),\n  //         },\n  //         () => {\n  //           this.setState(\n  //             {\n  //               index: this.state.playSongs[shuffleValue]._id,\n  //             },\n  //             () => {\n  //               var target = this.state.playSongs.find(\n  //                 (temp) => temp._id == this.state.index\n  //               );\n  //               this.setState(\n  //                 {\n  //                   onPlay: target.songUrl,\n  //                   songName: target.songName,\n  //                   songArtist: target.artistName,\n  //                   songImage: target.songImage,\n  //                   songUrl: target._id,\n  //                 },\n  //                 () => {\n  //                   this.props.getActiveIndex(\n  //                     this.state.index,\n  //                     this.state.playSongs\n  //                   );\n  //                 }\n  //               );\n  //             }\n  //           );\n  //         }\n  //       );\n  //     }\n  //   } else {\n  //     const songIndex = this.state.playSongs.findIndex((element, index) => {\n  //       if (element._id === this.state.index) {\n  //         return true;\n  //       }\n  //     });\n  //     if (this.state.playSongs.length === songIndex + 1) {\n  //       this.setState(\n  //         {\n  //           index: this.state.playSongs[0]._id,\n  //         },\n  //         () => {\n  //           var target = this.state.playSongs.find(\n  //             (temp) => temp._id == this.state.index\n  //           );\n  //           this.setState(\n  //             {\n  //               onPlay: target.songUrl,\n  //               songName: target.songName,\n  //               songArtist: target.artistName,\n  //               songImage: target.songImage,\n  //               songUrl: target._id,\n  //             },\n  //             () => {\n  //               this.props.getActiveIndex(\n  //                 this.state.index,\n  //                 this.state.playSongs\n  //               );\n  //             }\n  //           );\n  //         }\n  //       );\n  //     } else {\n  //       let nextIndex;\n  //       const songIndex = this.state.playSongs.findIndex((element, index) => {\n  //         if (element._id === this.state.index) {\n  //           return true;\n  //         }\n  //       });\n  //       nextIndex = this.state.playSongs[songIndex + 1]._id;\n  //       this.setState(\n  //         {\n  //           index: nextIndex,\n  //         },\n  //         () => {\n  //           var target = this.state.playSongs.find(\n  //             (temp) => temp._id == this.state.index\n  //           );\n  //           this.setState(\n  //             {\n  //               onPlay: target.songUrl,\n  //               songName: target.songName,\n  //               songArtist: target.artistName,\n  //               songImage: target.songImage,\n  //               songUrl: target._id,\n  //             },\n  //             () => {\n  //               this.props.getActiveIndex(\n  //                 this.state.index,\n  //                 this.state.playSongs\n  //               );\n  //             }\n  //           );\n  //         }\n  //       );\n  //     }\n  //   }\n  // };\n  // previousSong = () => {\n  //   if (this.state.shuffle) {\n  //     this.setState(\n  //       {\n  //         index: this.state.incrementShuffle,\n  //       },\n  //       () => {\n  //         this.setState(\n  //           {\n  //             onPlay: this.state.playSongs[\n  //               this.state.prevIndex[this.state.index]\n  //             ].songUrl,\n  //             songName: this.state.playSongs[\n  //               this.state.prevIndex[this.state.index]\n  //             ].songName,\n  //             songArtist: this.state.playSongs[\n  //               this.state.prevIndex[this.state.index]\n  //             ].artistName,\n  //             songImage: this.state.playSongs[\n  //               this.state.prevIndex[this.state.index]\n  //             ].songImage,\n  //             songUrl: this.state.playSongs[\n  //               this.state.prevIndex[this.state.index]\n  //             ]._id,\n  //           },\n  //           () => {\n  //             this.props.getActiveIndex(\n  //               this.state.prevIndex[this.state.index],\n  //               this.state.playSongs\n  //             );\n  //             if (\n  //               this.state.incrementShuffle <\n  //               this.state.prevIndex.length - 1\n  //             ) {\n  //               this.setState({\n  //                 incrementShuffle: this.state.incrementShuffle + 1,\n  //               });\n  //             }\n  //           }\n  //         );\n  //       }\n  //     );\n  //   } else {\n  //     if (this.state.index === this.state.playSongs[0]._id) {\n  //       this.setState(\n  //         {\n  //           index: this.state.playSongs[0]._id,\n  //         },\n  //         () => {\n  //           var target = this.state.playSongs.find(\n  //             (temp) => temp._id == this.state.index\n  //           );\n  //           this.setState(\n  //             {\n  //               onPlay: target.songUrl,\n  //               songName: target.songName,\n  //               songArtist: target.artistName,\n  //               songImage: target.songImage,\n  //               songUrl: target._id,\n  //             },\n  //             () => {\n  //               this.props.getActiveIndex(\n  //                 this.state.index,\n  //                 this.state.playSongs\n  //               );\n  //             }\n  //           );\n  //         }\n  //       );\n  //     } else {\n  //       let nextIndex;\n  //       const songIndex = this.state.playSongs.findIndex((element, index) => {\n  //         if (element._id === this.state.index) {\n  //           return true;\n  //         }\n  //       });\n  //       nextIndex = this.state.playSongs[songIndex - 1]._id;\n  //       this.setState(\n  //         {\n  //           index: nextIndex,\n  //         },\n  //         () => {\n  //           var target = this.state.playSongs.find(\n  //             (temp) => temp._id == this.state.index\n  //           );\n  //           this.setState(\n  //             {\n  //               onPlay: target.songUrl,\n  //               songName: target.songName,\n  //               songArtist: target.artistName,\n  //               songImage: target.songImage,\n  //               songUrl: target._id,\n  //             },\n  //             () => {\n  //               this.props.getActiveIndex(\n  //                 this.state.index,\n  //                 this.state.playSongs\n  //               );\n  //             }\n  //           );\n  //         }\n  //       );\n  //     }\n  //   }\n  // };\n  // shuffleStart = () => {\n  //   this.setState({\n  //     shuffle: !this.state.shuffle,\n  //   });\n  // };\n  // downloadSong = () => {\n  //   const url = \"http://localhost:4000/songs/download/\" + this.state.songUrl;\n  //   axios\n  //     .get(url, {\n  //       responseType: \"blob\",\n  //       headers: {\n  //         Accept: \"*/*\",\n  //         \"Content-Type\": \"audio/mpeg\",\n  //       },\n  //     })\n  //     .then((res) => {\n  //       // fileDownload(res.data, filename);\n  //       let url = window.URL.createObjectURL(res.data);\n  //       let a = document.createElement(\"a\");\n  //       a.href = url;\n  //       a.download = this.state.songName + \".mp3\";\n  //       a.click();\n  //     });\n  // };\n  render() {\n    console.log(this.props.queueList);\n    const {\n      dropdownExpand,\n      volumeSlider,\n      onPlay,\n      songName,\n      songArtist,\n      songImage,\n      closeAudioControl,\n      loopSong,\n      shuffle\n    } = this.state;\n    const loop = loopSong;\n    const fullWidth = this.props;\n    let audioClass;\n\n    if (fullWidth.fullWidth) {\n      audioClass = \"audioPlayer long-player\";\n    } else {\n      audioClass = \"audioPlayer\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"hell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }, this) // <div className={audioClass}>\n    //   <div className=\"audio\">\n    //     <div className=\"song-image\">\n    //       <img src={songImage} alt=\"song-image\" className=\"song-img\" />\n    //     </div>\n    //     <div className=\"song-info pl-3\">\n    //       <span className=\"song-title\">{songName}</span>\n    //       <span className=\"song-artist\">{songArtist}</span>\n    //     </div>\n    //   </div>\n    //   <div className=\"audio-controls\">\n    //     <div className=\"audio-controls--left d-flex mr-auto\">\n    //       <AudioPlayer\n    //         loop={loop}\n    //         src={onPlay}\n    //         onClickNext={this.nextSong}\n    //         onClickPrevious={this.previousSong}\n    //         // autoPlay={true}\n    //         showSkipControls={true}\n    //         showJumpControls={false}\n    //         customProgressBarSection={[RHAP_UI.PROGRESS_BAR]}\n    //         customVolumeControls={[\n    //           closeAudioControl && volumeSlider ? RHAP_UI.VOLUME : \"\",\n    //           <button\n    //             ref={(node) => (this.node = node)}\n    //             className=\"btn btn-icon-only\"\n    //             onClick={this.openVolumeSlider}\n    //             style={{ position: \"absolute\", right: \"105px\" }}\n    //           >\n    //             <span\n    //               className=\"iconify audio-player-icon\"\n    //               data-icon=\"ion-md-volume-low\"\n    //               data-inline=\"false\"\n    //             ></span>\n    //           </button>,\n    //         ]}\n    //         customControlsSection={[\n    //           RHAP_UI.LOOP,\n    //           RHAP_UI.MAIN_CONTROLS,\n    //           <button\n    //             className=\"btn btn-icon-only amplitude-shuffle amplitude-shuffle-on\"\n    //             onClick={this.shuffleStart}\n    //           >\n    //             <span\n    //               className={\"audio-player-icon iconify\"}\n    //               data-icon=\"ion-md-shuffle\"\n    //               data-inline=\"false\"\n    //             ></span>\n    //           </button>,\n    //           RHAP_UI.CURRENT_TIME,\n    //           <div className=\"or-arrow\"> / </div>,\n    //           RHAP_UI.DURATION,\n    //           RHAP_UI.VOLUME_CONTROLS,\n    //         ]}\n    //       />\n    //     </div>\n    //   </div>\n    //   <div className=\"audio-info\">\n    //     <div className=\"dropleft\">\n    //       <button\n    //         className=\"btn btn-icon-only\"\n    //         onClick={() => this.downloadSong()}\n    //       >\n    //         <span style={{ color: \"white\" }}>\n    //           <i class=\"fas fa-download\" style={{ fontSize: \"1.3rem\" }}></i>\n    //         </span>\n    //         {/* <span\n    //           className=\"iconify audio-player-icon\"\n    //           data-icon=\"bx:bxs-download\"\n    //           data-inline=\"false\"\n    //         ></span> */}\n    //       </button>\n    //       {/* <button\n    //         className=\"btn btn-icon-only\"\n    //         onClick={this.handleDropdownChange}\n    //       >\n    //         <span\n    //           className=\"iconify audio-player-icon\"\n    //           data-icon=\"fe:elipsis-v\"\n    //           data-inline=\"false\"\n    //         ></span>\n    //       </button>\n    //       <ActionPopover\n    //         dropdownExpand={dropdownExpand}\n    //         transform=\"translate3d(-162px, -143px, 0px)\"\n    //       /> */}\n    //     </div>\n    //     <button\n    //       className=\"btn btn-icon-only\"\n    //       onClick={this.props.handleOpenQueue}\n    //     >\n    //       <Icon className=\"music-icon\" icon={musicalNote} />\n    //     </button>\n    //   </div>\n    // </div>\n    ;\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  currentSongData: state.home.songData,\n  currentIndex: state.home.index,\n  queueList: state.home.queueSongs\n});\n\nexport default connect(mapStateToProps, {\n  getActiveIndex,\n  downloadSong\n})(Audio);","map":{"version":3,"sources":["/Users/akashsuryavanshi/Dropbox/My Mac (Akashs-iMac.local)/Documents/Tunex Workspace/Git Repo/MusicApp/src/Components/WrapperComponents/Audio/Audio.jsx"],"names":["React","Component","AudioPlayer","RHAP_UI","ReactAudioPlayer","songImage","Icon","InlineIcon","mdPlay","mdSync","musicalNote","music","mdVolumeLow","ActionPopover","connect","normalizeUnits","getActiveIndex","downloadSong","logger","axios","defaultImage","Audio","state","dropdownExpand","volumeSlider","closeAudioControl","index","onPlay","songName","songArtist","songUrl","shuffle","playSongs","prevIndex","shuffleIndex","incrementShuffle","handleDropdownChange","setState","openVolumeSlider","popupActionClick","e","node","contains","target","getSongsData","nextProps","currentIndex","currentSongData","find","temp","_id","artistName","console","log","props","componentWillMount","document","addEventListener","componentWillUnmount","removeEventListener","componentWillReceiveProps","render","queueList","loopSong","loop","fullWidth","audioClass","mapStateToProps","home","songData","queueSongs"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,cAAP;AACA,OAAOC,WAAP,IAAsBC,OAAtB,QAAqC,uBAArC;AACA,OAAO,sCAAP;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,SAAP,MAAsB,yCAAtB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,gBAAjC;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,WAAP,MAAwB,iCAAxB;AACA,OAAOC,KAAP,MAAkB,iCAAlB;AACA,OAAOC,WAAP,MAAwB,kCAAxB;AACA,OAAOC,aAAP,MAA0B,sDAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,SAASC,cAAT,EAAyBC,YAAzB,QAA6C,kBAA7C;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,iCAAzB;;AAEA,MAAMC,KAAN,SAAoBpB,SAApB,CAA8B;AAAA;AAAA;AAAA,SAC5BqB,KAD4B,GACpB;AACNC,MAAAA,cAAc,EAAE,KADV;AAENC,MAAAA,YAAY,EAAE,KAFR;AAGNC,MAAAA,iBAAiB,EAAE,KAHb;AAINC,MAAAA,KAAK,EAAE,CAJD;AAKNC,MAAAA,MAAM,EAAE,EALF;AAMNC,MAAAA,QAAQ,EAAE,EANJ;AAONC,MAAAA,UAAU,EAAE,EAPN;AAQNxB,MAAAA,SAAS,EAAEe,YARL;AASNU,MAAAA,OAAO,EAAE,EATH;AAUNC,MAAAA,OAAO,EAAE,KAVH;AAWNC,MAAAA,SAAS,EAAE,EAXL;AAYNC,MAAAA,SAAS,EAAE,EAZL;AAaNC,MAAAA,YAAY,EAAE,CAbR;AAcNC,MAAAA,gBAAgB,EAAE;AAdZ,KADoB;;AAAA,SAkB5BC,oBAlB4B,GAkBL,MAAM;AAC3B,WAAKC,QAAL,CAAc;AACZd,QAAAA,cAAc,EAAE,CAAC,KAAKD,KAAL,CAAWC;AADhB,OAAd;AAGD,KAtB2B;;AAAA,SAuB5Be,gBAvB4B,GAuBT,MAAM;AACvB,WAAKD,QAAL,CAAc;AACZb,QAAAA,YAAY,EAAE,CAAC,KAAKF,KAAL,CAAWE;AADd,OAAd;AAGD,KA3B2B;;AAAA,SAkC5Be,gBAlC4B,GAkCRC,CAAD,IAAO;AACxB,UAAI,KAAKC,IAAL,CAAUC,QAAV,CAAmBF,CAAC,CAACG,MAArB,CAAJ,EAAkC;AAChC,aAAKN,QAAL,CAAc;AACZZ,UAAAA,iBAAiB,EAAE;AADP,SAAd;AAGA,eAAO,IAAP;AACD;;AACD,WAAKY,QAAL,CAAc;AACZZ,QAAAA,iBAAiB,EAAE;AADP,OAAd;AAGD,KA5C2B;;AAAA,SAiD5BmB,YAjD4B,GAiDZC,SAAD,IAAe;AAC5B,UAAIA,SAAS,CAACC,YAAd,EAA4B;AAC1B,aAAKT,QAAL,CACE;AACEL,UAAAA,SAAS,EAAEa,SAAS,CAACE,eADvB;AAEErB,UAAAA,KAAK,EAAEmB,SAAS,CAACC;AAFnB,SADF,EAKE,MAAM;AACJ,cAAIH,MAAM,GAAGE,SAAS,CAACE,eAAV,CAA0BC,IAA1B,CACVC,IAAD,IAAUA,IAAI,CAACC,GAAL,IAAY,KAAK5B,KAAL,CAAWI,KADtB,CAAb;AAGA,eAAKW,QAAL,CACE;AACEV,YAAAA,MAAM,EAAEgB,MAAM,CAACb,OADjB;AAEEF,YAAAA,QAAQ,EAAEe,MAAM,CAACf,QAFnB;AAGEC,YAAAA,UAAU,EAAEc,MAAM,CAACQ,UAHrB;AAIE9C,YAAAA,SAAS,EAAEsC,MAAM,CAACtC,SAJpB;AAKEyB,YAAAA,OAAO,EAAEa,MAAM,CAACO;AALlB,WADF,EAQE,MAAM;AACJE,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAY,KAAK/B,KAAL,CAAWU,SAAvB,EAAkC,KAAKV,KAAL,CAAWI,KAA7C;AACA,iBAAK4B,KAAL,CAAWtC,cAAX,CAA0B,KAAKM,KAAL,CAAWI,KAArC,EAA4C,KAAKJ,KAAL,CAAWU,SAAvD;AACD,WAZH;AAcD,SAvBH;AAyBD,OA1BD,MA0BO,CACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACF,KArG2B;AAAA;;AA4B5BuB,EAAAA,kBAAkB,GAAG;AACnBC,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuC,KAAKlB,gBAA5C,EAA8D,KAA9D;AACD;;AACDmB,EAAAA,oBAAoB,GAAG;AACrBF,IAAAA,QAAQ,CAACG,mBAAT,CAA6B,WAA7B,EAA0C,KAAKpB,gBAA/C,EAAiE,KAAjE;AACD;;AAYDqB,EAAAA,yBAAyB,CAACf,SAAD,EAAY;AACnC,SAAKD,YAAL,CAAkBC,SAAlB;AACD;;AAwgB,EAAAA,MAAM,GAAG;AACPT,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWQ,SAAvB;AACA,UAAM;AACJvC,MAAAA,cADI;AAEJC,MAAAA,YAFI;AAGJG,MAAAA,MAHI;AAIJC,MAAAA,QAJI;AAKJC,MAAAA,UALI;AAMJxB,MAAAA,SANI;AAOJoB,MAAAA,iBAPI;AAQJsC,MAAAA,QARI;AASJhC,MAAAA;AATI,QAUF,KAAKT,KAVT;AAWA,UAAM0C,IAAI,GAAGD,QAAb;AACA,UAAME,SAAS,GAAG,KAAKX,KAAvB;AAEA,QAAIY,UAAJ;;AACA,QAAID,SAAS,CAACA,SAAd,EAAyB;AACvBC,MAAAA,UAAU,GAAG,yBAAb;AACD,KAFD,MAEO;AACLA,MAAAA,UAAU,GAAG,aAAb;AACD;;AACD,wBACE;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,CAIE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnGF;AAqGD;;AArd2B;;AAwd9B,MAAMC,eAAe,GAAI7C,KAAD,KAAY;AAClCyB,EAAAA,eAAe,EAAEzB,KAAK,CAAC8C,IAAN,CAAWC,QADM;AAElCvB,EAAAA,YAAY,EAAExB,KAAK,CAAC8C,IAAN,CAAW1C,KAFS;AAGlCoC,EAAAA,SAAS,EAAExC,KAAK,CAAC8C,IAAN,CAAWE;AAHY,CAAZ,CAAxB;;AAMA,eAAexD,OAAO,CAACqD,eAAD,EAAkB;AAAEnD,EAAAA,cAAF;AAAkBC,EAAAA;AAAlB,CAAlB,CAAP,CACbI,KADa,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Audio.scss\";\nimport AudioPlayer, { RHAP_UI } from \"react-h5-audio-player\";\nimport \"react-h5-audio-player/lib/styles.css\";\nimport ReactAudioPlayer from \"react-audio-player\";\nimport songImage from \"../../../Assets/image/sliderImage/1.jpg\";\nimport { Icon, InlineIcon } from \"@iconify/react\";\nimport mdPlay from \"@iconify-icons/ion/md-play\";\nimport mdSync from \"@iconify-icons/ion/md-sync\";\nimport musicalNote from \"@iconify-icons/ion/musical-note\";\nimport music from \"../../../Assets/Musics/test.mp3\";\nimport mdVolumeLow from \"@iconify-icons/ion/md-volume-low\";\nimport ActionPopover from \"../../ReusableComponents/ActionPopover/ActionPopover\";\nimport { connect } from \"react-redux\";\nimport { normalizeUnits } from \"moment\";\nimport { getActiveIndex, downloadSong } from \"../../../Actions\";\nimport logger from \"redux-logger\";\nimport axios from \"axios\";\nimport defaultImage from \"../../../Assets/defaultSong.jpg\";\n\nclass Audio extends Component {\n  state = {\n    dropdownExpand: false,\n    volumeSlider: false,\n    closeAudioControl: false,\n    index: 0,\n    onPlay: \"\",\n    songName: \"\",\n    songArtist: \"\",\n    songImage: defaultImage,\n    songUrl: \"\",\n    shuffle: false,\n    playSongs: [],\n    prevIndex: [],\n    shuffleIndex: 1,\n    incrementShuffle: 0,\n  };\n\n  handleDropdownChange = () => {\n    this.setState({\n      dropdownExpand: !this.state.dropdownExpand,\n    });\n  };\n  openVolumeSlider = () => {\n    this.setState({\n      volumeSlider: !this.state.volumeSlider,\n    });\n  };\n  componentWillMount() {\n    document.addEventListener(\"mousedown\", this.popupActionClick, false);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.popupActionClick, false);\n  }\n  popupActionClick = (e) => {\n    if (this.node.contains(e.target)) {\n      this.setState({\n        closeAudioControl: true,\n      });\n      return true;\n    }\n    this.setState({\n      closeAudioControl: false,\n    });\n  };\n  componentWillReceiveProps(nextProps) {\n    this.getSongsData(nextProps);\n  }\n\n  getSongsData = (nextProps) => {\n    if (nextProps.currentIndex) {\n      this.setState(\n        {\n          playSongs: nextProps.currentSongData,\n          index: nextProps.currentIndex,\n        },\n        () => {\n          var target = nextProps.currentSongData.find(\n            (temp) => temp._id == this.state.index\n          );\n          this.setState(\n            {\n              onPlay: target.songUrl,\n              songName: target.songName,\n              songArtist: target.artistName,\n              songImage: target.songImage,\n              songUrl: target._id,\n            },\n            () => {\n              console.log(\"asasasasas\");\n              console.log(this.state.playSongs, this.state.index);\n              this.props.getActiveIndex(this.state.index, this.state.playSongs);\n            }\n          );\n        }\n      );\n    } else {\n      // this.setState(\n      //   {\n      //     playSongs: nextProps.currentSongData,\n      //     index: nextProps.currentSongData[0]._id,\n      //   },\n      //   () => {\n      //     var target = nextProps.currentSongData.find(\n      //       (temp) => temp._id == this.state.index\n      //     );\n      //     this.setState(\n      //       {\n      //         onPlay: target.songUrl,\n      //         songName: target.songName,\n      //         songArtist: target.artistName,\n      //         songImage: target.songImage,\n      //         songUrl: target._id,\n      //       },\n      //       () => {\n      //         this.props.getActiveIndex(this.state.index, this.state.playSongs);\n      //       }\n      //     );\n      //   }\n      // );\n    }\n  };\n\n  // nextSong = () => {\n  //   if (this.state.shuffle) {\n  //     const shuffleValue = Math.floor(\n  //       Math.random(0, this.state.playSongs.length) * 10\n  //     );\n  //     if (!this.state.prevIndex.includes(shuffleValue)) {\n  //       this.setState(\n  //         {\n  //           prevIndex: this.state.prevIndex.concat(shuffleValue),\n  //         },\n  //         () => {\n  //           this.setState(\n  //             {\n  //               index: this.state.playSongs[shuffleValue]._id,\n  //             },\n\n  //             () => {\n  //               var target = this.state.playSongs.find(\n  //                 (temp) => temp._id == this.state.index\n  //               );\n\n  //               this.setState(\n  //                 {\n  //                   onPlay: target.songUrl,\n  //                   songName: target.songName,\n  //                   songArtist: target.artistName,\n  //                   songImage: target.songImage,\n  //                   songUrl: target._id,\n  //                 },\n  //                 () => {\n  //                   this.props.getActiveIndex(\n  //                     this.state.index,\n  //                     this.state.playSongs\n  //                   );\n  //                 }\n  //               );\n  //             }\n  //           );\n  //         }\n  //       );\n  //     }\n  //   } else {\n  //     const songIndex = this.state.playSongs.findIndex((element, index) => {\n  //       if (element._id === this.state.index) {\n  //         return true;\n  //       }\n  //     });\n  //     if (this.state.playSongs.length === songIndex + 1) {\n  //       this.setState(\n  //         {\n  //           index: this.state.playSongs[0]._id,\n  //         },\n  //         () => {\n  //           var target = this.state.playSongs.find(\n  //             (temp) => temp._id == this.state.index\n  //           );\n  //           this.setState(\n  //             {\n  //               onPlay: target.songUrl,\n  //               songName: target.songName,\n  //               songArtist: target.artistName,\n  //               songImage: target.songImage,\n  //               songUrl: target._id,\n  //             },\n  //             () => {\n  //               this.props.getActiveIndex(\n  //                 this.state.index,\n  //                 this.state.playSongs\n  //               );\n  //             }\n  //           );\n  //         }\n  //       );\n  //     } else {\n  //       let nextIndex;\n  //       const songIndex = this.state.playSongs.findIndex((element, index) => {\n  //         if (element._id === this.state.index) {\n  //           return true;\n  //         }\n  //       });\n  //       nextIndex = this.state.playSongs[songIndex + 1]._id;\n\n  //       this.setState(\n  //         {\n  //           index: nextIndex,\n  //         },\n  //         () => {\n  //           var target = this.state.playSongs.find(\n  //             (temp) => temp._id == this.state.index\n  //           );\n  //           this.setState(\n  //             {\n  //               onPlay: target.songUrl,\n  //               songName: target.songName,\n  //               songArtist: target.artistName,\n  //               songImage: target.songImage,\n  //               songUrl: target._id,\n  //             },\n  //             () => {\n  //               this.props.getActiveIndex(\n  //                 this.state.index,\n  //                 this.state.playSongs\n  //               );\n  //             }\n  //           );\n  //         }\n  //       );\n  //     }\n  //   }\n  // };\n\n  // previousSong = () => {\n  //   if (this.state.shuffle) {\n  //     this.setState(\n  //       {\n  //         index: this.state.incrementShuffle,\n  //       },\n  //       () => {\n  //         this.setState(\n  //           {\n  //             onPlay: this.state.playSongs[\n  //               this.state.prevIndex[this.state.index]\n  //             ].songUrl,\n  //             songName: this.state.playSongs[\n  //               this.state.prevIndex[this.state.index]\n  //             ].songName,\n  //             songArtist: this.state.playSongs[\n  //               this.state.prevIndex[this.state.index]\n  //             ].artistName,\n  //             songImage: this.state.playSongs[\n  //               this.state.prevIndex[this.state.index]\n  //             ].songImage,\n  //             songUrl: this.state.playSongs[\n  //               this.state.prevIndex[this.state.index]\n  //             ]._id,\n  //           },\n  //           () => {\n  //             this.props.getActiveIndex(\n  //               this.state.prevIndex[this.state.index],\n  //               this.state.playSongs\n  //             );\n  //             if (\n  //               this.state.incrementShuffle <\n  //               this.state.prevIndex.length - 1\n  //             ) {\n  //               this.setState({\n  //                 incrementShuffle: this.state.incrementShuffle + 1,\n  //               });\n  //             }\n  //           }\n  //         );\n  //       }\n  //     );\n  //   } else {\n  //     if (this.state.index === this.state.playSongs[0]._id) {\n  //       this.setState(\n  //         {\n  //           index: this.state.playSongs[0]._id,\n  //         },\n  //         () => {\n  //           var target = this.state.playSongs.find(\n  //             (temp) => temp._id == this.state.index\n  //           );\n  //           this.setState(\n  //             {\n  //               onPlay: target.songUrl,\n  //               songName: target.songName,\n  //               songArtist: target.artistName,\n  //               songImage: target.songImage,\n  //               songUrl: target._id,\n  //             },\n  //             () => {\n  //               this.props.getActiveIndex(\n  //                 this.state.index,\n  //                 this.state.playSongs\n  //               );\n  //             }\n  //           );\n  //         }\n  //       );\n  //     } else {\n  //       let nextIndex;\n  //       const songIndex = this.state.playSongs.findIndex((element, index) => {\n  //         if (element._id === this.state.index) {\n  //           return true;\n  //         }\n  //       });\n  //       nextIndex = this.state.playSongs[songIndex - 1]._id;\n  //       this.setState(\n  //         {\n  //           index: nextIndex,\n  //         },\n  //         () => {\n  //           var target = this.state.playSongs.find(\n  //             (temp) => temp._id == this.state.index\n  //           );\n  //           this.setState(\n  //             {\n  //               onPlay: target.songUrl,\n  //               songName: target.songName,\n  //               songArtist: target.artistName,\n  //               songImage: target.songImage,\n  //               songUrl: target._id,\n  //             },\n  //             () => {\n  //               this.props.getActiveIndex(\n  //                 this.state.index,\n  //                 this.state.playSongs\n  //               );\n  //             }\n  //           );\n  //         }\n  //       );\n  //     }\n  //   }\n  // };\n\n  // shuffleStart = () => {\n  //   this.setState({\n  //     shuffle: !this.state.shuffle,\n  //   });\n  // };\n\n  // downloadSong = () => {\n  //   const url = \"http://localhost:4000/songs/download/\" + this.state.songUrl;\n  //   axios\n  //     .get(url, {\n  //       responseType: \"blob\",\n  //       headers: {\n  //         Accept: \"*/*\",\n  //         \"Content-Type\": \"audio/mpeg\",\n  //       },\n  //     })\n  //     .then((res) => {\n  //       // fileDownload(res.data, filename);\n  //       let url = window.URL.createObjectURL(res.data);\n  //       let a = document.createElement(\"a\");\n  //       a.href = url;\n  //       a.download = this.state.songName + \".mp3\";\n  //       a.click();\n  //     });\n  // };\n\n  render() {\n    console.log(this.props.queueList);\n    const {\n      dropdownExpand,\n      volumeSlider,\n      onPlay,\n      songName,\n      songArtist,\n      songImage,\n      closeAudioControl,\n      loopSong,\n      shuffle,\n    } = this.state;\n    const loop = loopSong;\n    const fullWidth = this.props;\n\n    let audioClass;\n    if (fullWidth.fullWidth) {\n      audioClass = \"audioPlayer long-player\";\n    } else {\n      audioClass = \"audioPlayer\";\n    }\n    return (\n      <div>\n        <div>hell</div>\n      </div>\n      // <div className={audioClass}>\n      //   <div className=\"audio\">\n      //     <div className=\"song-image\">\n      //       <img src={songImage} alt=\"song-image\" className=\"song-img\" />\n      //     </div>\n      //     <div className=\"song-info pl-3\">\n      //       <span className=\"song-title\">{songName}</span>\n      //       <span className=\"song-artist\">{songArtist}</span>\n      //     </div>\n      //   </div>\n      //   <div className=\"audio-controls\">\n      //     <div className=\"audio-controls--left d-flex mr-auto\">\n      //       <AudioPlayer\n      //         loop={loop}\n      //         src={onPlay}\n      //         onClickNext={this.nextSong}\n      //         onClickPrevious={this.previousSong}\n      //         // autoPlay={true}\n      //         showSkipControls={true}\n      //         showJumpControls={false}\n      //         customProgressBarSection={[RHAP_UI.PROGRESS_BAR]}\n      //         customVolumeControls={[\n      //           closeAudioControl && volumeSlider ? RHAP_UI.VOLUME : \"\",\n      //           <button\n      //             ref={(node) => (this.node = node)}\n      //             className=\"btn btn-icon-only\"\n      //             onClick={this.openVolumeSlider}\n      //             style={{ position: \"absolute\", right: \"105px\" }}\n      //           >\n      //             <span\n      //               className=\"iconify audio-player-icon\"\n      //               data-icon=\"ion-md-volume-low\"\n      //               data-inline=\"false\"\n      //             ></span>\n      //           </button>,\n      //         ]}\n      //         customControlsSection={[\n      //           RHAP_UI.LOOP,\n      //           RHAP_UI.MAIN_CONTROLS,\n      //           <button\n      //             className=\"btn btn-icon-only amplitude-shuffle amplitude-shuffle-on\"\n      //             onClick={this.shuffleStart}\n      //           >\n      //             <span\n      //               className={\"audio-player-icon iconify\"}\n      //               data-icon=\"ion-md-shuffle\"\n      //               data-inline=\"false\"\n      //             ></span>\n      //           </button>,\n\n      //           RHAP_UI.CURRENT_TIME,\n      //           <div className=\"or-arrow\"> / </div>,\n      //           RHAP_UI.DURATION,\n      //           RHAP_UI.VOLUME_CONTROLS,\n      //         ]}\n      //       />\n      //     </div>\n      //   </div>\n      //   <div className=\"audio-info\">\n      //     <div className=\"dropleft\">\n      //       <button\n      //         className=\"btn btn-icon-only\"\n      //         onClick={() => this.downloadSong()}\n      //       >\n      //         <span style={{ color: \"white\" }}>\n      //           <i class=\"fas fa-download\" style={{ fontSize: \"1.3rem\" }}></i>\n      //         </span>\n      //         {/* <span\n      //           className=\"iconify audio-player-icon\"\n      //           data-icon=\"bx:bxs-download\"\n      //           data-inline=\"false\"\n      //         ></span> */}\n      //       </button>\n      //       {/* <button\n      //         className=\"btn btn-icon-only\"\n      //         onClick={this.handleDropdownChange}\n      //       >\n      //         <span\n      //           className=\"iconify audio-player-icon\"\n      //           data-icon=\"fe:elipsis-v\"\n      //           data-inline=\"false\"\n      //         ></span>\n      //       </button>\n      //       <ActionPopover\n      //         dropdownExpand={dropdownExpand}\n      //         transform=\"translate3d(-162px, -143px, 0px)\"\n      //       /> */}\n      //     </div>\n      //     <button\n      //       className=\"btn btn-icon-only\"\n      //       onClick={this.props.handleOpenQueue}\n      //     >\n      //       <Icon className=\"music-icon\" icon={musicalNote} />\n      //     </button>\n      //   </div>\n      // </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currentSongData: state.home.songData,\n  currentIndex: state.home.index,\n  queueList: state.home.queueSongs,\n});\n\nexport default connect(mapStateToProps, { getActiveIndex, downloadSong })(\n  Audio\n);\n"]},"metadata":{},"sourceType":"module"}