{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/akashsuryavanshi/Dropbox/My Mac (Akashs-iMac.local)/Documents/Tunex Workspace/Git Repo/MusicApp/src/Components/ReusableComponents/Dropzone/Dropzone.jsx\";\nimport React, { Component } from \"react\";\nimport DropzoneComponent from \"react-dropzone-component\";\nimport \"../../../../node_modules/react-dropzone-component/styles/filepicker.css\";\nimport \"../../../../node_modules/dropzone/dist/min/dropzone.min.css\"; // import '../../../../dropzone/dist/min/dropzone.min.css';\n\nimport randomstring from \"randomstring\";\nimport MyCropper from \"../image-cropper.jsx\";\nimport Modal from \"../Modal/Modal\";\nimport \"./dropzone.scss\";\nimport defaultUserImage from \"../../../assets/images/defaultAvatar.png\";\nimport Resizer from \"react-image-file-resizer\";\n\nclass Dropzone extends Component {\n  constructor(...args) {\n    super(...args);\n    this.myDropzone = null;\n    this.state = {\n      isEdit: null,\n      originalFile: \"\",\n      fileName: \"\",\n      newFile: \"\",\n      showModal: false,\n      preview: \"\",\n      lastImage: \"\",\n      errorMess: false,\n      fileSizeErrorMessage: false,\n      fileSize: \"\",\n      fileWidth: \"\",\n      fileHeight: \"\",\n      fileType: \"\"\n    };\n\n    this.initCallback = dropzone => {\n      this.myDropzone = dropzone;\n    };\n\n    this.removeFileFromDropzone = file => {\n      if (this.myDropzone) {\n        this.myDropzone.removeAllFiles();\n      }\n    };\n\n    this.renameFile = (file, key) => {\n      // const newFile = new File([file], randomstring.generate(12) + \".\" + this.state.fileName.split(\".\")[1], { type: file.type });\n      const newFile = new File([file], randomstring.generate(6) + (key ? \"_\" + key : \"\") + \".\" + file.type.split(\"/\")[1], {\n        type: file.type\n      });\n      return newFile;\n    };\n\n    this.handleCroppedImage = cropData => {\n      if (cropData) {\n        this.removeFileFromDropzone(\"\");\n        this.setState({\n          preview: cropData.preview,\n          showModal: false\n        }, () => {\n          var byteString = atob(cropData.preview.split(\",\")[1]);\n          var mimeString = cropData.preview.split(\",\")[0].split(\":\")[1].split(\";\")[0];\n          var ab = new ArrayBuffer(byteString.length);\n          var ia = new Uint8Array(ab);\n\n          for (var i = 0; i < byteString.length; i++) {\n            ia[i] = byteString.charCodeAt(i);\n          }\n\n          var file = new File([ia], this.state.fileName, {\n            type: mimeString\n          });\n          this.setState({\n            newFile: cropData.preview\n          });\n\n          if (file.size > this.state.fileSize) {\n            Resizer.imageFileResizer(file, 600, 300, this.state.fileType, 100, 0, uri => {\n              var file = new File([uri], this.state.fileName, {\n                type: mimeString\n              });\n              this.props.addFile(file, this.props.id);\n            }, 'blob'); // this.props.addFile(image, this.props.id);\n          } else {\n            this.props.addFile(file, this.props.id);\n          }\n        });\n      }\n    };\n\n    this.openModal = () => {\n      this.setState({\n        showModal: true\n      });\n    };\n\n    this.hideModal = () => {\n      this.setState({\n        showModal: false\n      });\n    };\n\n    this.removePreview = () => {\n      this.props.removeFile(this.props.id);\n      this.setState({\n        preview: null\n      });\n    };\n\n    this.toggleModal = () => {\n      if (!this.state.isLoading) {\n        if (this.state.showModal) {\n          this.removeFileFromDropzone(\"\");\n          this.setState({\n            showModal: !this.state.showModal,\n            preview: this.state.lastImage // preview: this.state.originalFile,\n\n          });\n          return;\n        }\n\n        this.setState({\n          showModal: !this.state.showModal\n        });\n      }\n    };\n  }\n\n  componentWillMount() {\n    this.props.onRef(this);\n    let {\n      isEdit,\n      imageUrl\n    } = this.props;\n\n    if (isEdit) {\n      this.setState({\n        isEdit: isEdit,\n        preview: imageUrl,\n        originalFile: imageUrl,\n        lastImage: imageUrl\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.preview !== null && typeof nextProps.imageUrl === \"string\") {\n      let {\n        isEdit,\n        imageUrl\n      } = nextProps;\n\n      if (isEdit) {\n        this.setState({\n          isEdit: isEdit,\n          preview: imageUrl,\n          originalFile: imageUrl,\n          lastImage: imageUrl\n        });\n      }\n    }\n\n    this.setState({\n      errorMess: false,\n      fileSizeErrorMessage: false\n    });\n  }\n\n  handleDroppedFile(file) {\n    this.setState({\n      errorMess: false,\n      fileSizeErrorMessage: false\n    }, () => {\n      var reader = new FileReader();\n      let that = this;\n      reader.addEventListener(\"load\", function () {\n        if (file.accepted) {\n          that.setState({\n            originalFile: reader.result,\n            fileName: file.name,\n            showModal: true\n          });\n        } else {\n          that.setState({\n            errorMess: true\n          });\n          that.removeFileFromDropzone(\"\");\n        }\n      }, false);\n\n      if (file && file.size < 5000000) {\n        reader.readAsDataURL(file);\n        this.setState({\n          fileSizeErrorMessage: false,\n          fileSize: file.size,\n          fileWidth: file.width,\n          fileHeight: file.height,\n          fileType: file.type.split(\"/\")[1]\n        });\n      } else {\n        this.removeFileFromDropzone(\"\");\n        this.setState({\n          preview: null,\n          fileSizeErrorMessage: true\n        });\n      }\n    });\n  }\n\n  render() {\n    let {\n      originalFile,\n      newFile,\n      showModal,\n      fileSizeErrorMessage\n    } = this.state;\n    var componentConfig = {\n      iconFiletypes: [\".jpg\", \".png\"],\n      showFiletypeIcon: true,\n      postUrl: \"no-url\"\n    };\n    let djsConfig = {\n      autoProcesQueue: false,\n      maxFiles: 1,\n      acceptedFiles: \"image/*\",\n      addRemoveLinks: true,\n      dictRemoveFile: \"Remove\",\n      error: false\n    };\n    var eventHandlers = {\n      init: this.initCallback,\n      addedfile: file => this.handleDroppedFile(file)\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [this.state.preview ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-6 el-element-overlay\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"el-card-item\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"el-card-avatar el-overlay-1\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.preview,\n              alt: \"no preview\",\n              onError: e => {\n                e.target.onerror = null;\n                e.target.src = defaultUserImage;\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"el-overlay scrl-dwn\",\n              children: /*#__PURE__*/_jsxDEV(\"ul\", {\n                className: \"el-info\",\n                children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"btn-outline btn-danger btn-xs image-popup-vertical-fit p-2 p-l-10 p-r-10\",\n                    onClick: () => this.openModal(),\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      className: \"fa fa-edit statusIcon\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 266,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 261,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 260,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"btn-outline btn-danger btn-xs image-popup-vertical-fit p-2 p-l-10 p-r-10\",\n                    onClick: () => this.removePreview(),\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      className: \"fa fa-times statusIcon\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 275,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 270,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 269,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-12\",\n        children: [/*#__PURE__*/_jsxDEV(DropzoneComponent, {\n          config: componentConfig,\n          eventHandlers: eventHandlers,\n          djsConfig: djsConfig\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }, this), this.state.errorMess ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-red\",\n          children: \"Please select only image file.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 15\n        }, this) : \"\", fileSizeErrorMessage ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-red\",\n          children: \"Please select image less than 5 MB.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 15\n        }, this) : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }, this), showModal && /*#__PURE__*/_jsxDEV(Modal, {\n        toggleModal: this.toggleModal,\n        modalfrom: \"dropZone\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-20\",\n            children: /*#__PURE__*/_jsxDEV(MyCropper, {\n              originalUploadFile: originalFile,\n              handleCroppImage: this.handleCroppedImage,\n              newFile: newFile,\n              minCropBoxHeight: this.props.minCropBoxHeight,\n              minCropBoxWidth: this.props.minCropBoxWidth\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Dropzone;","map":{"version":3,"sources":["/Users/akashsuryavanshi/Dropbox/My Mac (Akashs-iMac.local)/Documents/Tunex Workspace/Git Repo/MusicApp/src/Components/ReusableComponents/Dropzone/Dropzone.jsx"],"names":["React","Component","DropzoneComponent","randomstring","MyCropper","Modal","defaultUserImage","Resizer","Dropzone","myDropzone","state","isEdit","originalFile","fileName","newFile","showModal","preview","lastImage","errorMess","fileSizeErrorMessage","fileSize","fileWidth","fileHeight","fileType","initCallback","dropzone","removeFileFromDropzone","file","removeAllFiles","renameFile","key","File","generate","type","split","handleCroppedImage","cropData","setState","byteString","atob","mimeString","ab","ArrayBuffer","length","ia","Uint8Array","i","charCodeAt","size","imageFileResizer","uri","props","addFile","id","openModal","hideModal","removePreview","removeFile","toggleModal","isLoading","componentWillMount","onRef","imageUrl","componentWillReceiveProps","nextProps","handleDroppedFile","reader","FileReader","that","addEventListener","accepted","result","name","readAsDataURL","width","height","render","componentConfig","iconFiletypes","showFiletypeIcon","postUrl","djsConfig","autoProcesQueue","maxFiles","acceptedFiles","addRemoveLinks","dictRemoveFile","error","eventHandlers","init","addedfile","e","target","onerror","src","minCropBoxHeight","minCropBoxWidth"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport DropzoneComponent from \"react-dropzone-component\";\nimport \"../../../../node_modules/react-dropzone-component/styles/filepicker.css\";\nimport \"../../../../node_modules/dropzone/dist/min/dropzone.min.css\";\n// import '../../../../dropzone/dist/min/dropzone.min.css';\nimport randomstring from \"randomstring\";\nimport MyCropper from \"../image-cropper.jsx\";\nimport Modal from \"../Modal/Modal\";\nimport \"./dropzone.scss\";\nimport defaultUserImage from \"../../../assets/images/defaultAvatar.png\";\nimport Resizer from \"react-image-file-resizer\";\n\nclass Dropzone extends Component {\n  myDropzone = null;\n  state = {\n    isEdit: null,\n    originalFile: \"\",\n    fileName: \"\",\n    newFile: \"\",\n    showModal: false,\n    preview: \"\",\n    lastImage: \"\",\n    errorMess: false,\n    fileSizeErrorMessage: false,\n    fileSize: \"\",\n    fileWidth: \"\",\n    fileHeight: \"\",\n    fileType: \"\",\n  };\n\n  componentWillMount() {\n    this.props.onRef(this);\n    let { isEdit, imageUrl } = this.props;\n    if (isEdit) {\n      this.setState({\n        isEdit: isEdit,\n        preview: imageUrl,\n        originalFile: imageUrl,\n        lastImage: imageUrl,\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.preview !== null && typeof nextProps.imageUrl === \"string\") {\n      let { isEdit, imageUrl } = nextProps;\n\n      if (isEdit) {\n        this.setState({\n          isEdit: isEdit,\n          preview: imageUrl,\n          originalFile: imageUrl,\n          lastImage: imageUrl,\n        });\n      }\n    }\n\n    this.setState({\n      errorMess: false,\n      fileSizeErrorMessage: false,\n    });\n  }\n\n  initCallback = (dropzone) => {\n    this.myDropzone = dropzone;\n  };\n\n  removeFileFromDropzone = (file) => {\n    if (this.myDropzone) {\n      this.myDropzone.removeAllFiles();\n    }\n  };\n\n  renameFile = (file, key) => {\n    // const newFile = new File([file], randomstring.generate(12) + \".\" + this.state.fileName.split(\".\")[1], { type: file.type });\n    const newFile = new File(\n      [file],\n      randomstring.generate(6) +\n        (key ? \"_\" + key : \"\") +\n        \".\" +\n        file.type.split(\"/\")[1],\n      { type: file.type }\n    );\n    return newFile;\n  };\n\n  handleDroppedFile(file) {\n    this.setState(\n      {\n        errorMess: false,\n        fileSizeErrorMessage: false,\n      },\n      () => {\n        var reader = new FileReader();\n        let that = this;\n        reader.addEventListener(\n          \"load\",\n          function() {\n            if (file.accepted) {\n              that.setState({\n                originalFile: reader.result,\n                fileName: file.name,\n                showModal: true,\n              });\n            } else {\n              that.setState({\n                errorMess: true,\n              });\n              that.removeFileFromDropzone(\"\");\n            }\n          },\n          false\n        );\n       \n\n        if (file && file.size < 5000000) {\n          reader.readAsDataURL(file);\n          this.setState({\n            fileSizeErrorMessage: false,\n            fileSize: file.size,\n            fileWidth: file.width,\n            fileHeight: file.height,\n            fileType: file.type.split(\"/\")[1],\n          });\n        } else {\n          this.removeFileFromDropzone(\"\");\n          this.setState({\n            preview: null,\n            fileSizeErrorMessage: true,\n          });\n        }\n      }\n    );\n  }\n\n  handleCroppedImage = (cropData) => {\n    if (cropData) {\n      this.removeFileFromDropzone(\"\");\n      this.setState(\n        {\n          preview: cropData.preview,\n          showModal: false,\n        },\n        () => {\n          \n          var byteString = atob(cropData.preview.split(\",\")[1]);\n          var mimeString = cropData.preview\n            .split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n          var ab = new ArrayBuffer(byteString.length);\n          var ia = new Uint8Array(ab);\n          for (var i = 0; i < byteString.length; i++) {\n            ia[i] = byteString.charCodeAt(i);\n          }\n          var file = new File([ia], this.state.fileName, { type: mimeString });\n          this.setState({\n            newFile: cropData.preview,\n          });\n         \n          \n          if(file.size>this.state.fileSize){\n            \n            Resizer.imageFileResizer(\n              file,\n              600,\n              300,\n              this.state.fileType,\n              100,\n              0,\n              uri => {\n                  var file = new File([uri], this.state.fileName, { type: mimeString });\n                  this.props.addFile(file, this.props.id); \n                 \n              },\n              'blob',\n          );\n  // this.props.addFile(image, this.props.id);\n          }\n          else{\n            this.props.addFile(file, this.props.id);\n          }\n        }\n      );\n    }\n  };\n \n  openModal = () => {\n    this.setState({\n      showModal: true,\n    });\n  };\n\n  hideModal = () => {\n    this.setState({\n      showModal: false,\n    });\n  };\n\n  removePreview = () => {\n    this.props.removeFile(this.props.id);\n    this.setState({\n      preview: null,\n    });\n  };\n\n  toggleModal = () => {\n    if (!this.state.isLoading) {\n      if (this.state.showModal) {\n        this.removeFileFromDropzone(\"\");\n        this.setState({\n          showModal: !this.state.showModal,\n          preview: this.state.lastImage,\n          // preview: this.state.originalFile,\n        });\n        return;\n      }\n      this.setState({\n        showModal: !this.state.showModal,\n      });\n    }\n  };\n  render() {\n    let { originalFile, newFile, showModal, fileSizeErrorMessage } = this.state;\n\n    var componentConfig = {\n      iconFiletypes: [\".jpg\", \".png\"],\n      showFiletypeIcon: true,\n      postUrl: \"no-url\",\n    };\n    let djsConfig = {\n      autoProcesQueue: false,\n      maxFiles: 1,\n      acceptedFiles: \"image/*\",\n      addRemoveLinks: true,\n      dictRemoveFile: \"Remove\",\n      error:false\n    };\n\n    var eventHandlers = {\n      init: this.initCallback,\n      addedfile: (file) => this.handleDroppedFile(file),\n    };\n    return (\n      <div className=\"row\">\n        {this.state.preview ? (\n          <div className=\"col-md-6 el-element-overlay\">\n            <div className=\"el-card-item\">\n              <div className=\"el-card-avatar el-overlay-1\">\n                <img\n                  src={this.state.preview}\n                  alt=\"no preview\"\n                  onError={(e) => {\n                    e.target.onerror = null;\n                    e.target.src = defaultUserImage;\n                  }}\n                />\n                <div className=\"el-overlay scrl-dwn\">\n                  <ul className=\"el-info\">\n                    <li>\n                      <button\n                        type=\"button\"\n                        className=\"btn-outline btn-danger btn-xs image-popup-vertical-fit p-2 p-l-10 p-r-10\"\n                        onClick={() => this.openModal()}\n                      >\n                        <i className=\"fa fa-edit statusIcon\"></i>\n                      </button>\n                    </li>\n                    <li>\n                      <button\n                        type=\"button\"\n                        className=\"btn-outline btn-danger btn-xs image-popup-vertical-fit p-2 p-l-10 p-r-10\"\n                        onClick={() => this.removePreview()}\n                      >\n                        <i className=\"fa fa-times statusIcon\"></i>\n                      </button>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"col-md-12\">\n            <DropzoneComponent\n              config={componentConfig}\n              eventHandlers={eventHandlers}\n              djsConfig={djsConfig}\n            />\n            {this.state.errorMess ? (\n              <span className=\"text-red\">Please select only image file.</span>\n            ) : (\n              \"\"\n            )}\n            {fileSizeErrorMessage ? (\n              <span className=\"text-red\">\n                Please select image less than 5 MB.\n              </span>\n            ) : (\n              \"\"\n            )}\n          </div>\n        )}\n        {showModal && (\n          <Modal toggleModal={this.toggleModal} modalfrom=\"dropZone\">\n            <div>\n              <div className=\"p-20\">\n                <MyCropper\n                  originalUploadFile={originalFile}\n                  handleCroppImage={this.handleCroppedImage}\n                  newFile={newFile}\n                  minCropBoxHeight={this.props.minCropBoxHeight}\n                  minCropBoxWidth={this.props.minCropBoxWidth}\n                />\n              </div>\n            </div>\n          </Modal>\n        )}\n      </div>\n    );\n  }\n}\nexport default Dropzone;\n"]},"metadata":{},"sourceType":"module"}