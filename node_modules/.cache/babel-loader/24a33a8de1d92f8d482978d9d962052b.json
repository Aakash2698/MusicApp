{"ast":null,"code":"import global from \"../global\"; // import { Base64 } from 'js-base64';\n\nimport store from \"../configStore\"; // import history from '../history';\n\nimport { logoutSuccess } from \"../Actions\";\nconst globalUrl = global.config.apiUrl;\nexport default {\n  post: (url, data, headerData, version) => {\n    let header = headerData === \"header\" ? {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    } : {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: global.getToken()\n      },\n      body: JSON.stringify(data)\n    };\n    let apiUrl = globalUrl + url;\n    return fetch(apiUrl, header).then(response => {\n      // if (response.ok) {\n      return response.json().then(json => {\n        if (response.status === 401) {\n          // localStorage.clear();\n          // history.push(\"/login\");\n          store.dispatch(logoutSuccess());\n        }\n\n        return Promise.resolve({\n          responseData: json,\n          response: response\n        });\n      }).catch(err => {\n        return Promise.resolve({\n          response: response\n        });\n      });\n    }).catch(err => {\n      throw err;\n    });\n  },\n  postForm: (url, data, headerData, version) => {\n    let header = headerData === \"header\" ? {\n      method: \"POST\",\n      body: data,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    } : {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        authorization: global.getToken()\n      },\n      body: data\n    };\n    let apiUrl = globalUrl + url;\n    return fetch(apiUrl, header).then(response => {\n      // if (response.ok) {\n      return response.json().then(json => {\n        if (response.status === 401) {\n          // localStorage.clear();\n          // history.push(\"/login\");\n          store.dispatch(logoutSuccess());\n        }\n\n        return Promise.resolve({\n          responseData: json,\n          response: response\n        });\n      }).catch(err => {\n        return Promise.resolve({\n          response: response\n        });\n      });\n    }).catch(err => {\n      throw err;\n    });\n  },\n  postWithBasicAuth: (url, data, headerData) => {\n    let header = {\n      method: \"POST\",\n      headers: {\n        // 'Authorization': \"Basic \" + Base64.encode(\"UniversityBuddy:UniversityBuddy\")\n        Authorization: \"Basic \" + btoa(\"UniversityBuddy:UniversityBuddy\")\n      },\n      body: JSON.stringify(data)\n    };\n    return fetch(globalUrl + url, header).then(response => {\n      // if (response.ok) {\n      return response.json().then(json => {\n        if (response.status === 401) {\n          // localStorage.clear();\n          // history.push(\"/login\");\n          store.dispatch(logoutSuccess());\n        }\n\n        return Promise.resolve({\n          responseData: json,\n          response: response\n        });\n      }).catch(err => {\n        return Promise.resolve({\n          response: response\n        });\n      });\n    }).catch(err => {\n      throw err;\n    });\n  },\n  put: (url, data, basicAuth) => {\n    // let token = \"Basic \" + Base64.encode(\"UniversityBuddy:UniversityBuddy\")\n    let token = \"Basic \" + btoa(\"UniversityBuddy:UniversityBuddy\");\n    let header = data ? {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: basicAuth && basicAuth.basicAuth ? token : global.getToken()\n      },\n      body: JSON.stringify(data)\n    } : {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: basicAuth && basicAuth.basicAuth ? token : global.getToken()\n      }\n    };\n    return fetch(globalUrl + url, header).then(response => {\n      return response.json().then(json => {\n        if (response.status === 401) {\n          // localStorage.clear();\n          // history.push(\"/login\");\n          store.dispatch(logoutSuccess());\n        }\n\n        return Promise.resolve({\n          responseData: json,\n          response: response\n        });\n      }).catch(err => {\n        return Promise.resolve({\n          response: response\n        });\n      });\n    }).catch(err => {\n      throw err;\n    });\n  },\n  get: (url, version) => {\n    // let header =\n    //   noHeader && noHeader.noHeader\n    //     ? {\n    //         method: \"GET\",\n    //       }\n    //     : {\n    //         method: \"GET\",\n    //         headers: {\n    //           Authorization: global.getToken(),\n    //           \"Content-Type\": \"audio/mpeg\",\n    //         },\n    //       };\n    let apiUrl = globalUrl + url;\n    return fetch(apiUrl, {\n      method: \"GET\",\n      headers: {\n        Authorization: global.getToken(),\n        \"Content-Type\": \"audio/mpeg\"\n      },\n      responseType: \"blob\"\n    }).then(response => {\n      // if (response.ok) {\n      return response.json().then(json => {\n        if (response.status === 401) {\n          // localStorage.clear();\n          // history.push(\"/login\");\n          store.dispatch(logoutSuccess());\n        }\n\n        return Promise.resolve({\n          responseData: json,\n          response: response\n        });\n      }).catch(err => {\n        return Promise.resolve({\n          response: response\n        });\n      });\n    }).catch(err => {\n      throw err;\n    });\n  },\n  getWithBasicHeader: url => {\n    let token = \"Basic \" + btoa(\"UniversityBuddy:UniversityBuddy\");\n    return fetch(globalUrl + url, {\n      method: \"GET\",\n      headers: {\n        Authorization: token\n      }\n    }).then(response => {\n      // if (response.ok) {\n      return response.json().then(json => {\n        if (response.status === 401) {\n          // localStorage.clear();\n          // history.push(\"/login\");\n          store.dispatch(logoutSuccess());\n        }\n\n        return Promise.resolve({\n          responseData: json,\n          response: response\n        });\n      }).catch(err => {\n        return Promise.resolve({\n          response: response\n        });\n      });\n    }).catch(err => {\n      throw err;\n    });\n  },\n  delete: (url, data) => {\n    return fetch(globalUrl + url, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: global.getToken()\n      },\n      ...(data ? {\n        body: data\n      } : \"\")\n    }).then(response => {\n      return response.json().then(json => {\n        if (response.status === 401) {\n          // localStorage.clear();\n          // history.push(\"/login\");\n          store.dispatch(logoutSuccess());\n        }\n\n        return Promise.resolve({\n          responseData: json,\n          response: response\n        });\n      });\n    }).catch(err => {\n      throw err;\n    });\n  },\n  patch: (url, data) => {\n    // let header = data ? {\n    let header = {\n      method: \"PATCH\",\n      headers: {\n        Authorization: global.getToken()\n      },\n      ...(data && {\n        body: JSON.stringify(data)\n      })\n    }; // : {\n    //         method: 'PATCH',\n    //         headers: {\n    //             'Authorization': global.getToken()\n    //         },\n    //     };\n\n    return fetch(globalUrl + url, header).then(response => {\n      return response.json().then(json => {\n        if (response.status === 401) {\n          // localStorage.clear();\n          // history.push(\"/login\");\n          store.dispatch(logoutSuccess());\n        }\n\n        return Promise.resolve({\n          responseData: json,\n          response: response\n        });\n      });\n    }).catch(err => {\n      throw err;\n    });\n  }\n};","map":{"version":3,"sources":["/Users/akashsuryavanshi/Dropbox/My Mac (Akashs-iMac.local)/Documents/Tunex Workspace/Git Repo/MusicApp/src/service_api/index.js"],"names":["global","store","logoutSuccess","globalUrl","config","apiUrl","post","url","data","headerData","version","header","method","headers","body","JSON","stringify","Authorization","getToken","fetch","then","response","json","status","dispatch","Promise","resolve","responseData","catch","err","postForm","Accept","authorization","postWithBasicAuth","btoa","put","basicAuth","token","get","responseType","getWithBasicHeader","delete","patch"],"mappings":"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","sourcesContent":["import global from \"../global\";\n// import { Base64 } from 'js-base64';\nimport store from \"../configStore\";\n// import history from '../history';\nimport { logoutSuccess } from \"../Actions\";\n\nconst globalUrl = global.config.apiUrl;\n\nexport default {\n  post: (url, data, headerData, version) => {\n    let header =\n      headerData === \"header\"\n        ? {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(data),\n          }\n        : {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: global.getToken(),\n            },\n            body: JSON.stringify(data),\n          };\n    let apiUrl = globalUrl + url;\n    return fetch(apiUrl, header)\n      .then((response) => {\n        // if (response.ok) {\n        return response\n          .json()\n          .then((json) => {\n            if (response.status === 401) {\n              // localStorage.clear();\n              // history.push(\"/login\");\n              store.dispatch(logoutSuccess());\n            }\n            return Promise.resolve({\n              responseData: json,\n              response: response,\n            });\n          })\n          .catch((err) => {\n            return Promise.resolve({\n              response: response,\n            });\n          });\n      })\n      .catch((err) => {\n        throw err;\n      });\n  },\n  postForm: (url, data, headerData, version) => {\n    let header =\n      headerData === \"header\"\n        ? {\n            method: \"POST\",\n            body: data,\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }\n        : {\n            method: \"POST\",\n            headers: {\n              Accept: \"application/json\",\n              authorization: global.getToken(),\n            },\n            body: data,\n          };\n\n    let apiUrl = globalUrl + url;\n    return fetch(apiUrl, header)\n      .then((response) => {\n        // if (response.ok) {\n        return response\n          .json()\n          .then((json) => {\n            if (response.status === 401) {\n              // localStorage.clear();\n              // history.push(\"/login\");\n              store.dispatch(logoutSuccess());\n            }\n            return Promise.resolve({\n              responseData: json,\n              response: response,\n            });\n          })\n          .catch((err) => {\n            return Promise.resolve({\n              response: response,\n            });\n          });\n      })\n      .catch((err) => {\n        throw err;\n      });\n  },\n  postWithBasicAuth: (url, data, headerData) => {\n    let header = {\n      method: \"POST\",\n      headers: {\n        // 'Authorization': \"Basic \" + Base64.encode(\"UniversityBuddy:UniversityBuddy\")\n        Authorization: \"Basic \" + btoa(\"UniversityBuddy:UniversityBuddy\"),\n      },\n      body: JSON.stringify(data),\n    };\n    return fetch(globalUrl + url, header)\n      .then((response) => {\n        // if (response.ok) {\n        return response\n          .json()\n          .then((json) => {\n            if (response.status === 401) {\n              // localStorage.clear();\n              // history.push(\"/login\");\n              store.dispatch(logoutSuccess());\n            }\n            return Promise.resolve({\n              responseData: json,\n              response: response,\n            });\n          })\n          .catch((err) => {\n            return Promise.resolve({\n              response: response,\n            });\n          });\n      })\n      .catch((err) => {\n        throw err;\n      });\n  },\n  put: (url, data, basicAuth) => {\n    // let token = \"Basic \" + Base64.encode(\"UniversityBuddy:UniversityBuddy\")\n    let token = \"Basic \" + btoa(\"UniversityBuddy:UniversityBuddy\");\n    let header = data\n      ? {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization:\n              basicAuth && basicAuth.basicAuth ? token : global.getToken(),\n          },\n          body: JSON.stringify(data),\n        }\n      : {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization:\n              basicAuth && basicAuth.basicAuth ? token : global.getToken(),\n          },\n        };\n    return fetch(globalUrl + url, header)\n      .then((response) => {\n        return response\n          .json()\n          .then((json) => {\n            if (response.status === 401) {\n              // localStorage.clear();\n              // history.push(\"/login\");\n              store.dispatch(logoutSuccess());\n            }\n            return Promise.resolve({\n              responseData: json,\n              response: response,\n            });\n          })\n          .catch((err) => {\n            return Promise.resolve({\n              response: response,\n            });\n          });\n      })\n      .catch((err) => {\n        throw err;\n      });\n  },\n\n  get: (url, version) => {\n    // let header =\n    //   noHeader && noHeader.noHeader\n    //     ? {\n    //         method: \"GET\",\n    //       }\n    //     : {\n    //         method: \"GET\",\n    //         headers: {\n    //           Authorization: global.getToken(),\n    //           \"Content-Type\": \"audio/mpeg\",\n    //         },\n    //       };\n    let apiUrl = globalUrl + url;\n    return fetch(apiUrl, {\n      method: \"GET\",\n      headers: {\n        Authorization: global.getToken(),\n        \"Content-Type\": \"audio/mpeg\",\n      },\n      responseType: \"blob\",\n    })\n      .then((response) => {\n        // if (response.ok) {\n        return response\n          .json()\n          .then((json) => {\n            if (response.status === 401) {\n              // localStorage.clear();\n              // history.push(\"/login\");\n              store.dispatch(logoutSuccess());\n            }\n            return Promise.resolve({\n              responseData: json,\n              response: response,\n            });\n          })\n          .catch((err) => {\n            return Promise.resolve({\n              response: response,\n            });\n          });\n      })\n      .catch((err) => {\n        throw err;\n      });\n  },\n\n  getWithBasicHeader: (url) => {\n    let token = \"Basic \" + btoa(\"UniversityBuddy:UniversityBuddy\");\n    return fetch(globalUrl + url, {\n      method: \"GET\",\n      headers: {\n        Authorization: token,\n      },\n    })\n      .then((response) => {\n        // if (response.ok) {\n        return response\n          .json()\n          .then((json) => {\n            if (response.status === 401) {\n              // localStorage.clear();\n              // history.push(\"/login\");\n              store.dispatch(logoutSuccess());\n            }\n            return Promise.resolve({\n              responseData: json,\n              response: response,\n            });\n          })\n          .catch((err) => {\n            return Promise.resolve({\n              response: response,\n            });\n          });\n      })\n      .catch((err) => {\n        throw err;\n      });\n  },\n\n  delete: (url, data) => {\n    return fetch(globalUrl + url, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: global.getToken(),\n      },\n      ...(data ? { body: data } : \"\"),\n    })\n      .then((response) => {\n        return response.json().then((json) => {\n          if (response.status === 401) {\n            // localStorage.clear();\n            // history.push(\"/login\");\n            store.dispatch(logoutSuccess());\n          }\n          return Promise.resolve({\n            responseData: json,\n            response: response,\n          });\n        });\n      })\n      .catch((err) => {\n        throw err;\n      });\n  },\n\n  patch: (url, data) => {\n    // let header = data ? {\n    let header = {\n      method: \"PATCH\",\n      headers: {\n        Authorization: global.getToken(),\n      },\n      ...(data && { body: JSON.stringify(data) }),\n    };\n    // : {\n    //         method: 'PATCH',\n    //         headers: {\n    //             'Authorization': global.getToken()\n    //         },\n    //     };\n    return fetch(globalUrl + url, header)\n      .then((response) => {\n        return response.json().then((json) => {\n          if (response.status === 401) {\n            // localStorage.clear();\n            // history.push(\"/login\");\n            store.dispatch(logoutSuccess());\n          }\n          return Promise.resolve({\n            responseData: json,\n            response: response,\n          });\n        });\n      })\n      .catch((err) => {\n        throw err;\n      });\n  },\n};\n"]},"metadata":{},"sourceType":"module"}