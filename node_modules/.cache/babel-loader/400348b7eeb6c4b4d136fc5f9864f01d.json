{"ast":null,"code":"var fs = require('fs');\n\nvar url = require('url');\n\nvar http = require('http');\n\nvar https = require('https');\n\nvar mkdirp = require('mkdirp');\n\nmodule.exports = function download(file, options, callback) {\n  if (!file) throw \"Need a file url to download\";\n\n  if (!callback && typeof options === 'function') {\n    callback = options;\n  }\n\n  options = typeof options === 'object' ? options : {};\n  options.timeout = options.timeout || 20000;\n  options.directory = options.directory ? options.directory : '.';\n  var uri = file.split('/');\n  options.filename = options.filename || uri[uri.length - 1];\n  var path = options.directory + \"/\" + options.filename;\n\n  if (url.parse(file).protocol === null) {\n    file = 'http://' + file;\n    req = http;\n  } else if (url.parse(file).protocol === 'https:') {\n    req = https;\n  } else {\n    req = http;\n  }\n\n  var request = req.get(file, function (response) {\n    if (response.statusCode === 200) {\n      mkdirp(options.directory, function (err) {\n        if (err) throw err;\n        var file = fs.createWriteStream(path);\n        response.pipe(file);\n      });\n    } else {\n      if (callback) callback(response.statusCode);\n    }\n\n    response.on(\"end\", function () {\n      if (callback) callback(false, path);\n    });\n    request.setTimeout(options.timeout, function () {\n      request.abort();\n      callback(\"Timeout\");\n    });\n  }).on('error', function (e) {\n    if (callback) callback(e);\n  });\n};","map":{"version":3,"sources":["/Users/akashsuryavanshi/Dropbox/My Mac (Akashs-iMac.local)/Documents/Tunex Workspace/Git Repo/MusicApp/node_modules/download-file/index.js"],"names":["fs","require","url","http","https","mkdirp","module","exports","download","file","options","callback","timeout","directory","uri","split","filename","length","path","parse","protocol","req","request","get","response","statusCode","err","createWriteStream","pipe","on","setTimeout","abort","e"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,KAAD,CAAjB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAII,MAAM,GAAGJ,OAAO,CAAC,QAAD,CAApB;;AAEAK,MAAM,CAACC,OAAP,GAAiB,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,OAAxB,EAAiCC,QAAjC,EAA2C;AAC1D,MAAI,CAACF,IAAL,EAAW,MAAM,6BAAN;;AAEX,MAAI,CAACE,QAAD,IAAa,OAAOD,OAAP,KAAmB,UAApC,EAAgD;AAC9CC,IAAAA,QAAQ,GAAGD,OAAX;AACD;;AAEDA,EAAAA,OAAO,GAAG,OAAOA,OAAP,KAAmB,QAAnB,GAA8BA,OAA9B,GAAwC,EAAlD;AACAA,EAAAA,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACE,OAAR,IAAmB,KAArC;AACAF,EAAAA,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACG,SAA5B,GAAwC,GAA5D;AAEA,MAAIC,GAAG,GAAGL,IAAI,CAACM,KAAL,CAAW,GAAX,CAAV;AACAL,EAAAA,OAAO,CAACM,QAAR,GAAmBN,OAAO,CAACM,QAAR,IAAoBF,GAAG,CAACA,GAAG,CAACG,MAAJ,GAAa,CAAd,CAA1C;AAEA,MAAIC,IAAI,GAAGR,OAAO,CAACG,SAAR,GAAoB,GAApB,GAA0BH,OAAO,CAACM,QAA7C;;AAEA,MAAId,GAAG,CAACiB,KAAJ,CAAUV,IAAV,EAAgBW,QAAhB,KAA6B,IAAjC,EAAuC;AACrCX,IAAAA,IAAI,GAAG,YAAYA,IAAnB;AACAY,IAAAA,GAAG,GAAGlB,IAAN;AACD,GAHD,MAGO,IAAID,GAAG,CAACiB,KAAJ,CAAUV,IAAV,EAAgBW,QAAhB,KAA6B,QAAjC,EAA2C;AAChDC,IAAAA,GAAG,GAAGjB,KAAN;AACD,GAFM,MAEA;AACLiB,IAAAA,GAAG,GAAGlB,IAAN;AACD;;AAED,MAAImB,OAAO,GAAGD,GAAG,CAACE,GAAJ,CAAQd,IAAR,EAAc,UAASe,QAAT,EAAmB;AAE7C,QAAIA,QAAQ,CAACC,UAAT,KAAwB,GAA5B,EAAiC;AAE/BpB,MAAAA,MAAM,CAACK,OAAO,CAACG,SAAT,EAAoB,UAASa,GAAT,EAAc;AACtC,YAAIA,GAAJ,EAAS,MAAMA,GAAN;AACT,YAAIjB,IAAI,GAAGT,EAAE,CAAC2B,iBAAH,CAAqBT,IAArB,CAAX;AACAM,QAAAA,QAAQ,CAACI,IAAT,CAAcnB,IAAd;AACD,OAJK,CAAN;AAMD,KARD,MAQO;AAEL,UAAIE,QAAJ,EAAcA,QAAQ,CAACa,QAAQ,CAACC,UAAV,CAAR;AAEf;;AAEDD,IAAAA,QAAQ,CAACK,EAAT,CAAY,KAAZ,EAAmB,YAAU;AAC3B,UAAIlB,QAAJ,EAAcA,QAAQ,CAAC,KAAD,EAAQO,IAAR,CAAR;AACf,KAFD;AAIAI,IAAAA,OAAO,CAACQ,UAAR,CAAmBpB,OAAO,CAACE,OAA3B,EAAoC,YAAY;AAC9CU,MAAAA,OAAO,CAACS,KAAR;AACApB,MAAAA,QAAQ,CAAC,SAAD,CAAR;AACD,KAHD;AAKD,GAzBa,EAyBXkB,EAzBW,CAyBR,OAzBQ,EAyBC,UAASG,CAAT,EAAY;AAEzB,QAAIrB,QAAJ,EAAcA,QAAQ,CAACqB,CAAD,CAAR;AAEf,GA7Ba,CAAd;AA+BD,CAxDD","sourcesContent":["var fs = require('fs')\nvar url = require('url')\nvar http = require('http')\nvar https = require('https')\nvar mkdirp = require('mkdirp')\n\nmodule.exports = function download(file, options, callback) {\n  if (!file) throw(\"Need a file url to download\")\n\n  if (!callback && typeof options === 'function') {\n    callback = options\n  }\n\n  options = typeof options === 'object' ? options : {}\n  options.timeout = options.timeout || 20000\n  options.directory = options.directory ? options.directory : '.'\n\n  var uri = file.split('/')\n  options.filename = options.filename || uri[uri.length - 1]\n\n  var path = options.directory + \"/\" + options.filename\n\n  if (url.parse(file).protocol === null) {\n    file = 'http://' + file\n    req = http\n  } else if (url.parse(file).protocol === 'https:') {\n    req = https\n  } else {\n    req = http\n  }\n\n  var request = req.get(file, function(response) {\n\n    if (response.statusCode === 200) {\n\n      mkdirp(options.directory, function(err) { \n        if (err) throw err\n        var file = fs.createWriteStream(path)\n        response.pipe(file)\n      })\n\n    } else {\n\n      if (callback) callback(response.statusCode)\n\n    }\n\n    response.on(\"end\", function(){\n      if (callback) callback(false, path)\n    })\n\n    request.setTimeout(options.timeout, function () {\n      request.abort()\n      callback(\"Timeout\")\n    })\n\n  }).on('error', function(e) {\n\n    if (callback) callback(e)\n\n  })\n\n}\n"]},"metadata":{},"sourceType":"script"}