{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/akashsuryavanshi/Dropbox/My Mac (Akashs-iMac.local)/Documents/Tunex Workspace/Git Repo/MusicApp/src/Components/WrapperComponents/Audio/Audio.jsx\";\nimport React, { Component } from \"react\";\nimport \"./Audio.scss\";\nimport AudioPlayer, { RHAP_UI } from \"react-h5-audio-player\";\nimport \"react-h5-audio-player/lib/styles.css\";\nimport ReactAudioPlayer from \"react-audio-player\";\nimport songImage from \"../../../Assets/image/sliderImage/1.jpg\";\nimport { Icon, InlineIcon } from \"@iconify/react\";\nimport mdPlay from \"@iconify-icons/ion/md-play\";\nimport mdSync from \"@iconify-icons/ion/md-sync\";\nimport musicalNote from \"@iconify-icons/ion/musical-note\";\nimport music from \"../../../Assets/Musics/test.mp3\";\nimport mdVolumeLow from \"@iconify-icons/ion/md-volume-low\";\nimport ActionPopover from \"../../ReusableComponents/ActionPopover/ActionPopover\";\nimport { connect } from \"react-redux\";\nimport { normalizeUnits } from \"moment\";\nimport { getActiveIndex, downloadSong } from \"../../../Actions\";\nimport logger from \"redux-logger\";\nimport axios from \"axios\";\n\nclass Audio extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dropdownExpand: false,\n      volumeSlider: false,\n      closeAudioControl: false,\n      index: 0,\n      onPlay: \"http://localhost:4000/uploads/1608011825737.mp3\",\n      songName: \"Ek Tarfa(Reprise)\",\n      songArtist: \"Darshan Raval\",\n      songImage: \"http://localhost:4000/uploads/1608114760948.jpg\",\n      songUrl: \"5fe08ecd205bf820e2cf8f1f\",\n      shuffle: false,\n      playSongs: [],\n      prevIndex: [],\n      shuffleIndex: 1,\n      incrementShuffle: 0\n    };\n\n    this.handleDropdownChange = () => {\n      this.setState({\n        dropdownExpand: !this.state.dropdownExpand\n      });\n    };\n\n    this.openVolumeSlider = () => {\n      this.setState({\n        volumeSlider: !this.state.volumeSlider\n      });\n    };\n\n    this.popupActionClick = e => {\n      if (this.node.contains(e.target)) {\n        this.setState({\n          closeAudioControl: true\n        });\n        return true;\n      }\n\n      this.setState({\n        closeAudioControl: false\n      });\n    };\n\n    this.shuffleStart = () => {\n      this.setState({\n        shuffle: !this.state.shuffle\n      });\n    };\n\n    this.downloadSong = () => {\n      const url = \"http://localhost:4000/songs/download/\" + this.state.songUrl;\n      console.log(typeof url);\n      axios.get(url, {\n        responseType: \"blob\",\n        headers: {\n          Accept: \"*/*\",\n          \"Content-Type\": \"audio/mpeg\"\n        }\n      }).then(res => {\n        console.log(res); // fileDownload(res.data, filename);\n\n        let url = window.URL.createObjectURL(res.data);\n        console.log(url);\n        let a = document.createElement(\"a\");\n        a.href = url;\n        a.download = this.state.songName + \".mp3\";\n        a.click();\n      });\n    };\n  }\n\n  componentWillMount() {\n    document.addEventListener(\"mousedown\", this.popupActionClick, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.popupActionClick, false);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    console.log(nextProps.currentIndex, \"audio comporeciveprop\");\n\n    if (nextProps.currentIndex) {\n      this.setState({\n        playSongs: nextProps.currentSongData,\n        index: nextProps.currentIndex\n      }, () => {\n        var target = nextProps.currentSongData.find(temp => temp.id == this.state.index);\n        console.log(target);\n        this.setState({\n          onPlay: nextProps.currentSongData[this.state.index].songUrl,\n          songName: nextProps.currentSongData[this.state.index].songName,\n          songArtist: nextProps.currentSongData[this.state.index].artistName,\n          songImage: nextProps.currentSongData[this.state.index].songImage,\n          songUrl: nextProps.currentSongData[this.state.index]._id\n        }, () => {\n          this.props.getActiveIndex(this.state.index, this.state.playSongs);\n        });\n      });\n    } else {\n      this.setState({\n        playSongs: nextProps.currentSongData,\n        index: 0\n      }, () => {\n        this.setState({\n          onPlay: nextProps.currentSongData[this.state.index].songUrl,\n          songName: nextProps.currentSongData[this.state.index].songName,\n          songArtist: nextProps.currentSongData[this.state.index].artistName,\n          songImage: nextProps.currentSongData[this.state.index].songImage,\n          songUrl: nextProps.currentSongData[this.state.index]._id\n        }, () => {\n          this.props.getActiveIndex(this.state.index, this.state.playSongs);\n        });\n      });\n    }\n  } // nextSong = () => {\n  //   if (this.state.shuffle) {\n  //     const shuffleValue = Math.floor(\n  //       Math.random(0, this.state.playSongs.length) * 10\n  //     );\n  //     if (!this.state.prevIndex.includes(shuffleValue)) {\n  //       console.log(shuffleValue);\n  //       this.setState(\n  //         {\n  //           prevIndex: this.state.prevIndex.concat(shuffleValue),\n  //         },\n  //         () => {\n  //           this.setState(\n  //             {\n  //               index: shuffleValue,\n  //             },\n  //             () => {\n  //               this.setState(\n  //                 {\n  //                   onPlay: this.state.playSongs[this.state.index].songUrl,\n  //                   songName: this.state.playSongs[this.state.index].songName,\n  //                   songArtist: this.state.playSongs[this.state.index]\n  //                     .artistName,\n  //                   songImage: this.state.playSongs[this.state.index].songImage,\n  //                   songUrl: this.state.playSongs[this.state.index]._id,\n  //                 },\n  //                 () => {\n  //                   this.props.getActiveIndex(\n  //                     this.state.index,\n  //                     this.state.playSongs\n  //                   );\n  //                 }\n  //               );\n  //             }\n  //           );\n  //         }\n  //       );\n  //     }\n  //   } else {\n  //     if (this.state.index === this.state.playSongs.length - 1) {\n  //       this.setState(\n  //         {\n  //           index: 0,\n  //         },\n  //         () => {\n  //           this.setState(\n  //             {\n  //               onPlay: this.state.playSongs[this.state.index].songUrl,\n  //               songName: this.state.playSongs[this.state.index].songName,\n  //               songArtist: this.state.playSongs[this.state.index].artistName,\n  //               songImage: this.state.playSongs[this.state.index].songImage,\n  //               songUrl: this.state.playSongs[this.state.index]._id,\n  //             },\n  //             () => {\n  //               this.props.getActiveIndex(\n  //                 this.state.index,\n  //                 this.state.playSongs\n  //               );\n  //             }\n  //           );\n  //         }\n  //       );\n  //     } else {\n  //       this.setState(\n  //         {\n  //           index: this.state.index + 1,\n  //         },\n  //         () => {\n  //           this.setState(\n  //             {\n  //               onPlay: this.state.playSongs[this.state.index].songUrl,\n  //               songName: this.state.playSongs[this.state.index].songName,\n  //               songArtist: this.state.playSongs[this.state.index].artistName,\n  //               songImage: this.state.playSongs[this.state.index].songImage,\n  //               songUrl: this.state.playSongs[this.state.index]._id,\n  //             },\n  //             () => {\n  //               this.props.getActiveIndex(\n  //                 this.state.index,\n  //                 this.state.playSongs\n  //               );\n  //             }\n  //           );\n  //         }\n  //       );\n  //     }\n  //   }\n  // };\n  // previousSong = () => {\n  //   console.log(this.state.prevIndex);\n  //   if (this.state.shuffle) {\n  //     this.setState(\n  //       {\n  //         index: this.state.incrementShuffle,\n  //       },\n  //       () => {\n  //         console.log(this.state.prevIndex[this.state.index]);\n  //         this.setState(\n  //           {\n  //             onPlay: this.state.playSongs[\n  //               this.state.prevIndex[this.state.index]\n  //             ].songUrl,\n  //             songName: this.state.playSongs[\n  //               this.state.prevIndex[this.state.index]\n  //             ].songName,\n  //             songArtist: this.state.playSongs[\n  //               this.state.prevIndex[this.state.index]\n  //             ].artistName,\n  //             songImage: this.state.playSongs[\n  //               this.state.prevIndex[this.state.index]\n  //             ].songImage,\n  //             songUrl: this.state.playSongs[\n  //               this.state.prevIndex[this.state.index]\n  //             ]._id,\n  //           },\n  //           () => {\n  //             this.props.getActiveIndex(\n  //               this.state.prevIndex[this.state.index],\n  //               this.state.playSongs\n  //             );\n  //             if (\n  //               this.state.incrementShuffle <\n  //               this.state.prevIndex.length - 1\n  //             ) {\n  //               this.setState({\n  //                 incrementShuffle: this.state.incrementShuffle + 1,\n  //               });\n  //             }\n  //           }\n  //         );\n  //       }\n  //     );\n  //   } else {\n  //     if (this.state.index === 0) {\n  //       this.setState(\n  //         {\n  //           index: 0,\n  //         },\n  //         () => {\n  //           this.setState(\n  //             {\n  //               onPlay: this.state.playSongs[this.state.index].songUrl,\n  //               songName: this.state.playSongs[this.state.index].songName,\n  //               songArtist: this.state.playSongs[this.state.index].artistName,\n  //               songImage: this.state.playSongs[this.state.index].songImage,\n  //               songUrl: this.state.playSongs[this.state.index]._id,\n  //             },\n  //             () => {\n  //               this.props.getActiveIndex(\n  //                 this.state.index,\n  //                 this.state.playSongs\n  //               );\n  //             }\n  //           );\n  //         }\n  //       );\n  //     } else {\n  //       this.setState(\n  //         {\n  //           index: this.state.index - 1,\n  //         },\n  //         () => {\n  //           this.setState(\n  //             {\n  //               onPlay: this.state.playSongs[this.state.index].songUrl,\n  //               songName: this.state.playSongs[this.state.index].songName,\n  //               songArtist: this.state.playSongs[this.state.index].artistName,\n  //               songImage: this.state.playSongs[this.state.index].songImage,\n  //               songUrl: this.state.playSongs[this.state.index]._id,\n  //             },\n  //             () => {\n  //               this.props.getActiveIndex(\n  //                 this.state.index,\n  //                 this.state.playSongs\n  //               );\n  //             }\n  //           );\n  //         }\n  //       );\n  //     }\n  //   }\n  // };\n\n\n  render() {\n    const {\n      dropdownExpand,\n      volumeSlider,\n      onPlay,\n      songName,\n      songArtist,\n      songImage,\n      closeAudioControl,\n      loopSong,\n      shuffle\n    } = this.state;\n    const loop = loopSong;\n    const fullWidth = this.props;\n    console.log(this.state.playSongs);\n    let audioClass;\n\n    if (fullWidth.fullWidth) {\n      audioClass = \"audioPlayer long-player\";\n    } else {\n      audioClass = \"audioPlayer\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: audioClass,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"audio\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"song-image\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: songImage,\n            alt: \"song-image\",\n            className: \"song-img\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"song-info pl-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"song-title\",\n            children: songName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"song-artist\",\n            children: songArtist\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"audio-controls\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"audio-controls--left d-flex mr-auto\",\n          children: /*#__PURE__*/_jsxDEV(AudioPlayer, {\n            loop: loop,\n            src: onPlay,\n            onClickNext: this.nextSong,\n            onClickPrevious: this.previousSong // autoPlay={true}\n            ,\n            showSkipControls: true,\n            showJumpControls: false,\n            customProgressBarSection: [RHAP_UI.PROGRESS_BAR],\n            customVolumeControls: [closeAudioControl && volumeSlider ? RHAP_UI.VOLUME : \"\", /*#__PURE__*/_jsxDEV(\"button\", {\n              ref: node => this.node = node,\n              className: \"btn btn-icon-only\",\n              onClick: this.openVolumeSlider,\n              style: {\n                position: \"absolute\",\n                right: \"105px\"\n              },\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"iconify audio-player-icon\",\n                \"data-icon\": \"ion-md-volume-low\",\n                \"data-inline\": \"false\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 383,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 17\n            }, this)],\n            customControlsSection: [RHAP_UI.LOOP, RHAP_UI.MAIN_CONTROLS, /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-icon-only amplitude-shuffle amplitude-shuffle-on\",\n              onClick: this.shuffleStart,\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"audio-player-icon iconify\",\n                \"data-icon\": \"ion-md-shuffle\",\n                \"data-inline\": \"false\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 397,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 17\n            }, this), RHAP_UI.CURRENT_TIME, /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"or-arrow\",\n              children: \" / \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 17\n            }, this), RHAP_UI.DURATION, RHAP_UI.VOLUME_CONTROLS]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"audio-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropleft\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-icon-only\",\n            onClick: () => this.downloadSong(),\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: \"white\"\n              },\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                class: \"fas fa-download\",\n                style: {\n                  fontSize: \"1.3rem\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 419,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-icon-only\",\n          onClick: this.props.handleOpenSidebar,\n          children: /*#__PURE__*/_jsxDEV(Icon, {\n            className: \"music-icon\",\n            icon: musicalNote\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  currentSongData: state.home.songData,\n  currentIndex: state.home.index\n});\n\nexport default connect(mapStateToProps, {\n  getActiveIndex,\n  downloadSong\n})(Audio);","map":{"version":3,"sources":["/Users/akashsuryavanshi/Dropbox/My Mac (Akashs-iMac.local)/Documents/Tunex Workspace/Git Repo/MusicApp/src/Components/WrapperComponents/Audio/Audio.jsx"],"names":["React","Component","AudioPlayer","RHAP_UI","ReactAudioPlayer","songImage","Icon","InlineIcon","mdPlay","mdSync","musicalNote","music","mdVolumeLow","ActionPopover","connect","normalizeUnits","getActiveIndex","downloadSong","logger","axios","Audio","state","dropdownExpand","volumeSlider","closeAudioControl","index","onPlay","songName","songArtist","songUrl","shuffle","playSongs","prevIndex","shuffleIndex","incrementShuffle","handleDropdownChange","setState","openVolumeSlider","popupActionClick","e","node","contains","target","shuffleStart","url","console","log","get","responseType","headers","Accept","then","res","window","URL","createObjectURL","data","a","document","createElement","href","download","click","componentWillMount","addEventListener","componentWillUnmount","removeEventListener","componentWillReceiveProps","nextProps","currentIndex","currentSongData","find","temp","id","artistName","_id","props","render","loopSong","loop","fullWidth","audioClass","nextSong","previousSong","PROGRESS_BAR","VOLUME","position","right","LOOP","MAIN_CONTROLS","CURRENT_TIME","DURATION","VOLUME_CONTROLS","color","fontSize","handleOpenSidebar","mapStateToProps","home","songData"],"mappings":"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QAAAA,KAAK,EAAE;AAFT,OADF,EAKE,MAAM;AACJ,aAAKW,QAAL,CACE;AACEV,UAAAA,MAAM,EAAE0C,SAAS,CAACE,eAAV,CAA0B,KAAKjD,KAAL,CAAWI,KAArC,EAA4CI,OADtD;AAEEF,UAAAA,QAAQ,EAAEyC,SAAS,CAACE,eAAV,CAA0B,KAAKjD,KAAL,CAAWI,KAArC,EAA4CE,QAFxD;AAGEC,UAAAA,UAAU,EACRwC,SAAS,CAACE,eAAV,CAA0B,KAAKjD,KAAL,CAAWI,KAArC,EAA4CiD,UAJhD;AAKErE,UAAAA,SAAS,EAAE+D,SAAS,CAACE,eAAV,CAA0B,KAAKjD,KAAL,CAAWI,KAArC,EAA4CpB,SALzD;AAMEwB,UAAAA,OAAO,EAAEuC,SAAS,CAACE,eAAV,CAA0B,KAAKjD,KAAL,CAAWI,KAArC,EAA4CkD;AANvD,SADF,EASE,MAAM;AACJ,eAAKC,KAAL,CAAW5D,cAAX,CAA0B,KAAKK,KAAL,CAAWI,KAArC,EAA4C,KAAKJ,KAAL,CAAWU,SAAvD;AACD,SAXH;AAaD,OAnBH;AAqBD;AACF,GAhG2B,CAkG5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Audio.scss\";\nimport AudioPlayer, { RHAP_UI } from \"react-h5-audio-player\";\nimport \"react-h5-audio-player/lib/styles.css\";\nimport ReactAudioPlayer from \"react-audio-player\";\nimport songImage from \"../../../Assets/image/sliderImage/1.jpg\";\nimport { Icon, InlineIcon } from \"@iconify/react\";\nimport mdPlay from \"@iconify-icons/ion/md-play\";\nimport mdSync from \"@iconify-icons/ion/md-sync\";\nimport musicalNote from \"@iconify-icons/ion/musical-note\";\nimport music from \"../../../Assets/Musics/test.mp3\";\nimport mdVolumeLow from \"@iconify-icons/ion/md-volume-low\";\nimport ActionPopover from \"../../ReusableComponents/ActionPopover/ActionPopover\";\nimport { connect } from \"react-redux\";\nimport { normalizeUnits } from \"moment\";\nimport { getActiveIndex, downloadSong } from \"../../../Actions\";\nimport logger from \"redux-logger\";\nimport axios from \"axios\";\n\nclass Audio extends Component {\n  state = {\n    dropdownExpand: false,\n    volumeSlider: false,\n    closeAudioControl: false,\n    index: 0,\n    onPlay: \"http://localhost:4000/uploads/1608011825737.mp3\",\n    songName: \"Ek Tarfa(Reprise)\",\n    songArtist: \"Darshan Raval\",\n    songImage: \"http://localhost:4000/uploads/1608114760948.jpg\",\n    songUrl: \"5fe08ecd205bf820e2cf8f1f\",\n    shuffle: false,\n    playSongs: [],\n    prevIndex: [],\n    shuffleIndex: 1,\n    incrementShuffle: 0,\n  };\n\n  handleDropdownChange = () => {\n    this.setState({\n      dropdownExpand: !this.state.dropdownExpand,\n    });\n  };\n  openVolumeSlider = () => {\n    this.setState({\n      volumeSlider: !this.state.volumeSlider,\n    });\n  };\n  componentWillMount() {\n    document.addEventListener(\"mousedown\", this.popupActionClick, false);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.popupActionClick, false);\n  }\n  popupActionClick = (e) => {\n    if (this.node.contains(e.target)) {\n      this.setState({\n        closeAudioControl: true,\n      });\n      return true;\n    }\n    this.setState({\n      closeAudioControl: false,\n    });\n  };\n  componentWillReceiveProps(nextProps) {\n    console.log(nextProps.currentIndex, \"audio comporeciveprop\");\n    if (nextProps.currentIndex) {\n      this.setState(\n        {\n          playSongs: nextProps.currentSongData,\n          index: nextProps.currentIndex,\n        },\n        () => {\n          var target = nextProps.currentSongData.find(\n            (temp) => temp.id == this.state.index\n          );\n          console.log(target);\n          this.setState(\n            {\n              onPlay: nextProps.currentSongData[this.state.index].songUrl,\n              songName: nextProps.currentSongData[this.state.index].songName,\n              songArtist:\n                nextProps.currentSongData[this.state.index].artistName,\n              songImage: nextProps.currentSongData[this.state.index].songImage,\n              songUrl: nextProps.currentSongData[this.state.index]._id,\n            },\n            () => {\n              this.props.getActiveIndex(this.state.index, this.state.playSongs);\n            }\n          );\n        }\n      );\n    } else {\n      this.setState(\n        {\n          playSongs: nextProps.currentSongData,\n          index: 0,\n        },\n        () => {\n          this.setState(\n            {\n              onPlay: nextProps.currentSongData[this.state.index].songUrl,\n              songName: nextProps.currentSongData[this.state.index].songName,\n              songArtist:\n                nextProps.currentSongData[this.state.index].artistName,\n              songImage: nextProps.currentSongData[this.state.index].songImage,\n              songUrl: nextProps.currentSongData[this.state.index]._id,\n            },\n            () => {\n              this.props.getActiveIndex(this.state.index, this.state.playSongs);\n            }\n          );\n        }\n      );\n    }\n  }\n\n  // nextSong = () => {\n  //   if (this.state.shuffle) {\n  //     const shuffleValue = Math.floor(\n  //       Math.random(0, this.state.playSongs.length) * 10\n  //     );\n  //     if (!this.state.prevIndex.includes(shuffleValue)) {\n  //       console.log(shuffleValue);\n  //       this.setState(\n  //         {\n  //           prevIndex: this.state.prevIndex.concat(shuffleValue),\n  //         },\n  //         () => {\n  //           this.setState(\n  //             {\n  //               index: shuffleValue,\n  //             },\n  //             () => {\n  //               this.setState(\n  //                 {\n  //                   onPlay: this.state.playSongs[this.state.index].songUrl,\n  //                   songName: this.state.playSongs[this.state.index].songName,\n  //                   songArtist: this.state.playSongs[this.state.index]\n  //                     .artistName,\n  //                   songImage: this.state.playSongs[this.state.index].songImage,\n  //                   songUrl: this.state.playSongs[this.state.index]._id,\n  //                 },\n  //                 () => {\n  //                   this.props.getActiveIndex(\n  //                     this.state.index,\n  //                     this.state.playSongs\n  //                   );\n  //                 }\n  //               );\n  //             }\n  //           );\n  //         }\n  //       );\n  //     }\n  //   } else {\n  //     if (this.state.index === this.state.playSongs.length - 1) {\n  //       this.setState(\n  //         {\n  //           index: 0,\n  //         },\n  //         () => {\n  //           this.setState(\n  //             {\n  //               onPlay: this.state.playSongs[this.state.index].songUrl,\n  //               songName: this.state.playSongs[this.state.index].songName,\n  //               songArtist: this.state.playSongs[this.state.index].artistName,\n  //               songImage: this.state.playSongs[this.state.index].songImage,\n  //               songUrl: this.state.playSongs[this.state.index]._id,\n  //             },\n  //             () => {\n  //               this.props.getActiveIndex(\n  //                 this.state.index,\n  //                 this.state.playSongs\n  //               );\n  //             }\n  //           );\n  //         }\n  //       );\n  //     } else {\n  //       this.setState(\n  //         {\n  //           index: this.state.index + 1,\n  //         },\n  //         () => {\n  //           this.setState(\n  //             {\n  //               onPlay: this.state.playSongs[this.state.index].songUrl,\n  //               songName: this.state.playSongs[this.state.index].songName,\n  //               songArtist: this.state.playSongs[this.state.index].artistName,\n  //               songImage: this.state.playSongs[this.state.index].songImage,\n  //               songUrl: this.state.playSongs[this.state.index]._id,\n  //             },\n  //             () => {\n  //               this.props.getActiveIndex(\n  //                 this.state.index,\n  //                 this.state.playSongs\n  //               );\n  //             }\n  //           );\n  //         }\n  //       );\n  //     }\n  //   }\n  // };\n\n  // previousSong = () => {\n  //   console.log(this.state.prevIndex);\n  //   if (this.state.shuffle) {\n  //     this.setState(\n  //       {\n  //         index: this.state.incrementShuffle,\n  //       },\n  //       () => {\n  //         console.log(this.state.prevIndex[this.state.index]);\n  //         this.setState(\n  //           {\n  //             onPlay: this.state.playSongs[\n  //               this.state.prevIndex[this.state.index]\n  //             ].songUrl,\n  //             songName: this.state.playSongs[\n  //               this.state.prevIndex[this.state.index]\n  //             ].songName,\n  //             songArtist: this.state.playSongs[\n  //               this.state.prevIndex[this.state.index]\n  //             ].artistName,\n  //             songImage: this.state.playSongs[\n  //               this.state.prevIndex[this.state.index]\n  //             ].songImage,\n  //             songUrl: this.state.playSongs[\n  //               this.state.prevIndex[this.state.index]\n  //             ]._id,\n  //           },\n  //           () => {\n  //             this.props.getActiveIndex(\n  //               this.state.prevIndex[this.state.index],\n  //               this.state.playSongs\n  //             );\n  //             if (\n  //               this.state.incrementShuffle <\n  //               this.state.prevIndex.length - 1\n  //             ) {\n  //               this.setState({\n  //                 incrementShuffle: this.state.incrementShuffle + 1,\n  //               });\n  //             }\n  //           }\n  //         );\n  //       }\n  //     );\n  //   } else {\n  //     if (this.state.index === 0) {\n  //       this.setState(\n  //         {\n  //           index: 0,\n  //         },\n  //         () => {\n  //           this.setState(\n  //             {\n  //               onPlay: this.state.playSongs[this.state.index].songUrl,\n  //               songName: this.state.playSongs[this.state.index].songName,\n  //               songArtist: this.state.playSongs[this.state.index].artistName,\n  //               songImage: this.state.playSongs[this.state.index].songImage,\n  //               songUrl: this.state.playSongs[this.state.index]._id,\n  //             },\n  //             () => {\n  //               this.props.getActiveIndex(\n  //                 this.state.index,\n  //                 this.state.playSongs\n  //               );\n  //             }\n  //           );\n  //         }\n  //       );\n  //     } else {\n  //       this.setState(\n  //         {\n  //           index: this.state.index - 1,\n  //         },\n  //         () => {\n  //           this.setState(\n  //             {\n  //               onPlay: this.state.playSongs[this.state.index].songUrl,\n  //               songName: this.state.playSongs[this.state.index].songName,\n  //               songArtist: this.state.playSongs[this.state.index].artistName,\n  //               songImage: this.state.playSongs[this.state.index].songImage,\n  //               songUrl: this.state.playSongs[this.state.index]._id,\n  //             },\n  //             () => {\n  //               this.props.getActiveIndex(\n  //                 this.state.index,\n  //                 this.state.playSongs\n  //               );\n  //             }\n  //           );\n  //         }\n  //       );\n  //     }\n  //   }\n  // };\n\n  shuffleStart = () => {\n    this.setState({\n      shuffle: !this.state.shuffle,\n    });\n  };\n\n  downloadSong = () => {\n    const url = \"http://localhost:4000/songs/download/\" + this.state.songUrl;\n    console.log(typeof url);\n    axios\n      .get(url, {\n        responseType: \"blob\",\n        headers: {\n          Accept: \"*/*\",\n          \"Content-Type\": \"audio/mpeg\",\n        },\n      })\n      .then((res) => {\n        console.log(res);\n        // fileDownload(res.data, filename);\n        let url = window.URL.createObjectURL(res.data);\n        console.log(url);\n        let a = document.createElement(\"a\");\n        a.href = url;\n        a.download = this.state.songName + \".mp3\";\n        a.click();\n      });\n  };\n\n  render() {\n    const {\n      dropdownExpand,\n      volumeSlider,\n      onPlay,\n      songName,\n      songArtist,\n      songImage,\n      closeAudioControl,\n      loopSong,\n      shuffle,\n    } = this.state;\n    const loop = loopSong;\n    const fullWidth = this.props;\n\n    console.log(this.state.playSongs);\n    let audioClass;\n    if (fullWidth.fullWidth) {\n      audioClass = \"audioPlayer long-player\";\n    } else {\n      audioClass = \"audioPlayer\";\n    }\n    return (\n      <div className={audioClass}>\n        <div className=\"audio\">\n          <div className=\"song-image\">\n            <img src={songImage} alt=\"song-image\" className=\"song-img\" />\n          </div>\n          <div className=\"song-info pl-3\">\n            <span className=\"song-title\">{songName}</span>\n            <span className=\"song-artist\">{songArtist}</span>\n          </div>\n        </div>\n        <div className=\"audio-controls\">\n          <div className=\"audio-controls--left d-flex mr-auto\">\n            <AudioPlayer\n              loop={loop}\n              src={onPlay}\n              onClickNext={this.nextSong}\n              onClickPrevious={this.previousSong}\n              // autoPlay={true}\n              showSkipControls={true}\n              showJumpControls={false}\n              customProgressBarSection={[RHAP_UI.PROGRESS_BAR]}\n              customVolumeControls={[\n                closeAudioControl && volumeSlider ? RHAP_UI.VOLUME : \"\",\n                <button\n                  ref={(node) => (this.node = node)}\n                  className=\"btn btn-icon-only\"\n                  onClick={this.openVolumeSlider}\n                  style={{ position: \"absolute\", right: \"105px\" }}\n                >\n                  <span\n                    className=\"iconify audio-player-icon\"\n                    data-icon=\"ion-md-volume-low\"\n                    data-inline=\"false\"\n                  ></span>\n                </button>,\n              ]}\n              customControlsSection={[\n                RHAP_UI.LOOP,\n                RHAP_UI.MAIN_CONTROLS,\n                <button\n                  className=\"btn btn-icon-only amplitude-shuffle amplitude-shuffle-on\"\n                  onClick={this.shuffleStart}\n                >\n                  <span\n                    className={\"audio-player-icon iconify\"}\n                    data-icon=\"ion-md-shuffle\"\n                    data-inline=\"false\"\n                  ></span>\n                </button>,\n\n                RHAP_UI.CURRENT_TIME,\n                <div className=\"or-arrow\"> / </div>,\n                RHAP_UI.DURATION,\n                RHAP_UI.VOLUME_CONTROLS,\n              ]}\n            />\n          </div>\n        </div>\n        <div className=\"audio-info\">\n          <div className=\"dropleft\">\n            <button\n              className=\"btn btn-icon-only\"\n              onClick={() => this.downloadSong()}\n            >\n              <span style={{ color: \"white\" }}>\n                <i class=\"fas fa-download\" style={{ fontSize: \"1.3rem\" }}></i>\n              </span>\n              {/* <span\n                className=\"iconify audio-player-icon\"\n                data-icon=\"bx:bxs-download\"\n                data-inline=\"false\"\n              ></span> */}\n            </button>\n            {/* <button\n              className=\"btn btn-icon-only\"\n              onClick={this.handleDropdownChange}\n            >\n              <span\n                className=\"iconify audio-player-icon\"\n                data-icon=\"fe:elipsis-v\"\n                data-inline=\"false\"\n              ></span>\n            </button>\n            <ActionPopover\n              dropdownExpand={dropdownExpand}\n              transform=\"translate3d(-162px, -143px, 0px)\"\n            /> */}\n          </div>\n          <button\n            className=\"btn btn-icon-only\"\n            onClick={this.props.handleOpenSidebar}\n          >\n            <Icon className=\"music-icon\" icon={musicalNote} />\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currentSongData: state.home.songData,\n  currentIndex: state.home.index,\n});\n\nexport default connect(mapStateToProps, { getActiveIndex, downloadSong })(\n  Audio\n);\n"]},"metadata":{},"sourceType":"module"}