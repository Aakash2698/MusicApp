{"ast":null,"code":"import React from \"react\";\nimport moment from \"moment\";\nconst LoaderContext = /*#__PURE__*/React.createContext();\nexport default {\n  config: {\n    apiUrl: \"http://localhost:4000/user/\",\n    // baseUrl: \"http://localhost:3001/\",\n    apiKey: \"AIzaSyA2JN9arUrX7EIMhW4WxzLoRHNFDXFtuHo\"\n  },\n  errors: {\n    error400: \"Technical error!\"\n  },\n  getToken: () => {\n    return localStorage.getItem(\"authToken\");\n  },\n  check_Auth: props => {\n    let authToken = localStorage.getItem(\"authToken\");\n\n    if (authToken === null && props.location.pathname === \"/login\") {\n      props.push(\"/login\");\n    } else {\n      if (props.location.pathname === \"/login\") {\n        props.goBack();\n      }\n    }\n  },\n  toCapitalize: string => {\n    if (!string) {\n      return string;\n    }\n\n    let strArray = string.split(\" \");\n    let newString = \"\";\n    strArray.map(s => {\n      var word = s && s && s[0].toUpperCase() + s.substring(1, s.length).toLowerCase();\n\n      if (strArray.length > 1) {\n        newString += word + \" \";\n      } else {\n        newString += word;\n      }\n\n      return null;\n    });\n    return newString;\n  },\n  LoaderContext: LoaderContext,\n  timeZoneList: () => {\n    let timezoneList = [];\n    let timezones = moment.tz.names();\n    timezones.length > 0 && timezones.map(timezone => {\n      let offSet = moment().tz(timezone).format(\"Z\");\n      timezoneList = [...timezoneList, {\n        name: \"(GMT \" + offSet + \") \" + timezone,\n        value: timezone\n      }];\n      return timezoneList;\n    });\n    return timezoneList;\n  },\n  formatDateAndTime: (dateTime, timeZone) => {\n    moment.tz.setDefault(timeZone);\n    let time = dateTime.time.format(\"HH:mm\");\n    let formattedDateTime = moment(dateTime.date + \" \" + time, \"MM/DD/YYYY HH:mm\").format(\"YYYY-MM-DDTHH:mm:ss\");\n    let utc = moment(formattedDateTime).utc().format();\n    return utc;\n  },\n  checkForTime: (fromTime, toTime) => {\n    if (toTime.hour() >= fromTime.hour()) {\n      if (toTime.hour() === fromTime.hour() && toTime.minute() <= fromTime.minute()) {\n        // Incorrect time\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      // Incorrect time\n      return true;\n    }\n  },\n  positionArray: [{\n    id: 0,\n    name: \"President\"\n  }, {\n    id: 1,\n    name: \"Treasurer\"\n  }]\n};","map":{"version":3,"sources":["/Users/akashsuryavanshi/Dropbox/My Mac (Akashs-iMac.local)/Documents/Tunex Workspace/Git Repo/music-app/src/global.jsx"],"names":["React","moment","LoaderContext","createContext","config","apiUrl","apiKey","errors","error400","getToken","localStorage","getItem","check_Auth","props","authToken","location","pathname","push","goBack","toCapitalize","string","strArray","split","newString","map","s","word","toUpperCase","substring","length","toLowerCase","timeZoneList","timezoneList","timezones","tz","names","timezone","offSet","format","name","value","formatDateAndTime","dateTime","timeZone","setDefault","time","formattedDateTime","date","utc","checkForTime","fromTime","toTime","hour","minute","positionArray","id"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,MAAMC,aAAa,gBAAGF,KAAK,CAACG,aAAN,EAAtB;AACA,eAAe;AACbC,EAAAA,MAAM,EAAE;AACNC,IAAAA,MAAM,EAAE,6BADF;AAEN;AACAC,IAAAA,MAAM,EAAE;AAHF,GADK;AAObC,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EAAE;AADJ,GAPK;AAWbC,EAAAA,QAAQ,EAAE,MAAM;AACd,WAAOC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAP;AACD,GAbY;AAebC,EAAAA,UAAU,EAAGC,KAAD,IAAW;AACrB,QAAIC,SAAS,GAAGJ,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAhB;;AACA,QAAIG,SAAS,KAAK,IAAd,IAAsBD,KAAK,CAACE,QAAN,CAAeC,QAAf,KAA4B,QAAtD,EAAgE;AAC9DH,MAAAA,KAAK,CAACI,IAAN,CAAW,QAAX;AACD,KAFD,MAEO;AACL,UAAIJ,KAAK,CAACE,QAAN,CAAeC,QAAf,KAA4B,QAAhC,EAA0C;AACxCH,QAAAA,KAAK,CAACK,MAAN;AACD;AACF;AACF,GAxBY;AA0BbC,EAAAA,YAAY,EAAGC,MAAD,IAAY;AACxB,QAAI,CAACA,MAAL,EAAa;AACX,aAAOA,MAAP;AACD;;AACD,QAAIC,QAAQ,GAAGD,MAAM,CAACE,KAAP,CAAa,GAAb,CAAf;AACA,QAAIC,SAAS,GAAG,EAAhB;AACAF,IAAAA,QAAQ,CAACG,GAAT,CAAcC,CAAD,IAAO;AAClB,UAAIC,IAAI,GACND,CAAC,IAAIA,CAAL,IAAUA,CAAC,CAAC,CAAD,CAAD,CAAKE,WAAL,KAAqBF,CAAC,CAACG,SAAF,CAAY,CAAZ,EAAeH,CAAC,CAACI,MAAjB,EAAyBC,WAAzB,EADjC;;AAEA,UAAIT,QAAQ,CAACQ,MAAT,GAAkB,CAAtB,EAAyB;AACvBN,QAAAA,SAAS,IAAIG,IAAI,GAAG,GAApB;AACD,OAFD,MAEO;AACLH,QAAAA,SAAS,IAAIG,IAAb;AACD;;AACD,aAAO,IAAP;AACD,KATD;AAWA,WAAOH,SAAP;AACD,GA5CY;AA6CbrB,EAAAA,aAAa,EAAEA,aA7CF;AA8Cb6B,EAAAA,YAAY,EAAE,MAAM;AAClB,QAAIC,YAAY,GAAG,EAAnB;AACA,QAAIC,SAAS,GAAGhC,MAAM,CAACiC,EAAP,CAAUC,KAAV,EAAhB;AACAF,IAAAA,SAAS,CAACJ,MAAV,GAAmB,CAAnB,IACEI,SAAS,CAACT,GAAV,CAAeY,QAAD,IAAc;AAC1B,UAAIC,MAAM,GAAGpC,MAAM,GAAGiC,EAAT,CAAYE,QAAZ,EAAsBE,MAAtB,CAA6B,GAA7B,CAAb;AACAN,MAAAA,YAAY,GAAG,CACb,GAAGA,YADU,EAEb;AACEO,QAAAA,IAAI,EAAE,UAAUF,MAAV,GAAmB,IAAnB,GAA0BD,QADlC;AAEEI,QAAAA,KAAK,EAAEJ;AAFT,OAFa,CAAf;AAOA,aAAOJ,YAAP;AACD,KAVD,CADF;AAYA,WAAOA,YAAP;AACD,GA9DY;AAgEbS,EAAAA,iBAAiB,EAAE,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACzC1C,IAAAA,MAAM,CAACiC,EAAP,CAAUU,UAAV,CAAqBD,QAArB;AACA,QAAIE,IAAI,GAAGH,QAAQ,CAACG,IAAT,CAAcP,MAAd,CAAqB,OAArB,CAAX;AACA,QAAIQ,iBAAiB,GAAG7C,MAAM,CAC5ByC,QAAQ,CAACK,IAAT,GAAgB,GAAhB,GAAsBF,IADM,EAE5B,kBAF4B,CAAN,CAGtBP,MAHsB,CAGf,qBAHe,CAAxB;AAIA,QAAIU,GAAG,GAAG/C,MAAM,CAAC6C,iBAAD,CAAN,CAA0BE,GAA1B,GAAgCV,MAAhC,EAAV;AACA,WAAOU,GAAP;AACD,GAzEY;AA2EbC,EAAAA,YAAY,EAAE,CAACC,QAAD,EAAWC,MAAX,KAAsB;AAClC,QAAIA,MAAM,CAACC,IAAP,MAAiBF,QAAQ,CAACE,IAAT,EAArB,EAAsC;AACpC,UACED,MAAM,CAACC,IAAP,OAAkBF,QAAQ,CAACE,IAAT,EAAlB,IACAD,MAAM,CAACE,MAAP,MAAmBH,QAAQ,CAACG,MAAT,EAFrB,EAGE;AACA;AACA,eAAO,IAAP;AACD,OAND,MAMO;AACL,eAAO,KAAP;AACD;AACF,KAVD,MAUO;AACL;AACA,aAAO,IAAP;AACD;AACF,GA1FY;AA2FbC,EAAAA,aAAa,EAAE,CACb;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAAShB,IAAAA,IAAI,EAAE;AAAf,GADa,EAEb;AAAEgB,IAAAA,EAAE,EAAE,CAAN;AAAShB,IAAAA,IAAI,EAAE;AAAf,GAFa;AA3FF,CAAf","sourcesContent":["import React from \"react\";\nimport moment from \"moment\";\n\nconst LoaderContext = React.createContext();\nexport default {\n  config: {\n    apiUrl: \"http://localhost:4000/user/\",\n    // baseUrl: \"http://localhost:3001/\",\n    apiKey: \"AIzaSyA2JN9arUrX7EIMhW4WxzLoRHNFDXFtuHo\",\n  },\n\n  errors: {\n    error400: \"Technical error!\",\n  },\n\n  getToken: () => {\n    return localStorage.getItem(\"authToken\");\n  },\n\n  check_Auth: (props) => {\n    let authToken = localStorage.getItem(\"authToken\");\n    if (authToken === null && props.location.pathname === \"/login\") {\n      props.push(\"/login\");\n    } else {\n      if (props.location.pathname === \"/login\") {\n        props.goBack();\n      }\n    }\n  },\n\n  toCapitalize: (string) => {\n    if (!string) {\n      return string;\n    }\n    let strArray = string.split(\" \");\n    let newString = \"\";\n    strArray.map((s) => {\n      var word =\n        s && s && s[0].toUpperCase() + s.substring(1, s.length).toLowerCase();\n      if (strArray.length > 1) {\n        newString += word + \" \";\n      } else {\n        newString += word;\n      }\n      return null;\n    });\n\n    return newString;\n  },\n  LoaderContext: LoaderContext,\n  timeZoneList: () => {\n    let timezoneList = [];\n    let timezones = moment.tz.names();\n    timezones.length > 0 &&\n      timezones.map((timezone) => {\n        let offSet = moment().tz(timezone).format(\"Z\");\n        timezoneList = [\n          ...timezoneList,\n          {\n            name: \"(GMT \" + offSet + \") \" + timezone,\n            value: timezone,\n          },\n        ];\n        return timezoneList;\n      });\n    return timezoneList;\n  },\n\n  formatDateAndTime: (dateTime, timeZone) => {\n    moment.tz.setDefault(timeZone);\n    let time = dateTime.time.format(\"HH:mm\");\n    let formattedDateTime = moment(\n      dateTime.date + \" \" + time,\n      \"MM/DD/YYYY HH:mm\"\n    ).format(\"YYYY-MM-DDTHH:mm:ss\");\n    let utc = moment(formattedDateTime).utc().format();\n    return utc;\n  },\n\n  checkForTime: (fromTime, toTime) => {\n    if (toTime.hour() >= fromTime.hour()) {\n      if (\n        toTime.hour() === fromTime.hour() &&\n        toTime.minute() <= fromTime.minute()\n      ) {\n        // Incorrect time\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      // Incorrect time\n      return true;\n    }\n  },\n  positionArray: [\n    { id: 0, name: \"President\" },\n    { id: 1, name: \"Treasurer\" },\n  ],\n};\n"]},"metadata":{},"sourceType":"module"}