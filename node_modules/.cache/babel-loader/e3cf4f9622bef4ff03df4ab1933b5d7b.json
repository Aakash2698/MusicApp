{"ast":null,"code":"import { TOP_CHART_MUSIC, NEW_RELEASES, SONG_DATA, RETRO_CLASSIC, RADIO_MUSIC, FEATURE_ARTISTS, ARTIST_DETAILS, TOP_CHART, GENRES, GENRES_MUSIC, RETRO_CLASSIC_MUSIC, ALL_SONGS, SONG_TYPE_DATA, SEARCH_DATA, ACTIVE_INDEX, DOWNLOAD_SONG, CLEAR_QUEUE } from \"../ActionTypes/ActionTypes\";\nimport fileDownload from \"js-file-download\";\nimport download from \"downloadjs\";\nexport const topChartMusic = () => (dispatch, getState, Api) => {\n  return Api.get(\"topcharts/all-top-charts\").then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: TOP_CHART_MUSIC,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const newReleaseMusic = () => (dispatch, getState, Api) => {\n  return Api.get(\"new-release/get-new-release\").then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: NEW_RELEASES,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const setMusicData = (payload, index) => dispatch => {\n  return dispatch({\n    type: SONG_DATA,\n    payload: {\n      payload,\n      index\n    }\n  });\n};\nexport const retroClassicMusic = () => (dispatch, getState, Api) => {\n  return Api.get(\"retro-classic/get-retro-classic\").then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: RETRO_CLASSIC,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const radioMusic = () => (dispatch, getState, Api) => {\n  return Api.get(\"radio/get-radio\").then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: RADIO_MUSIC,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const featureArtists = () => (dispatch, getState, Api) => {\n  return Api.get(\"feature-artists/all-feature-artists\").then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: FEATURE_ARTISTS,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const artistsDetails = artistName => (dispatch, getState, Api) => {\n  return Api.get(`feature-artists/${artistName}`).then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: ARTIST_DETAILS,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const getChartDetails = chartName => (dispatch, getState, Api) => {\n  return Api.get(`topcharts/${chartName}`).then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: TOP_CHART,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const genres = () => (dispatch, getState, Api) => {\n  return Api.get(\"genres/all-genres\").then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: GENRES,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const genresMusic = genresType => (dispatch, getState, Api) => {\n  return Api.get(`genres/${genresType}`).then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: GENRES_MUSIC,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const retroClassic = hitsArtist => (dispatch, getState, Api) => {\n  return Api.get(`retro-classic/${hitsArtist}`).then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: RETRO_CLASSIC_MUSIC,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const AllSongs = () => (dispatch, getState, Api) => {\n  return Api.get(`genres/all-songs`).then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: ALL_SONGS,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const getSongsType = songType => (dispatch, getState, Api) => {\n  return Api.get(`songs/${songType}`).then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: SONG_TYPE_DATA,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const getSearchAll = searchText => (dispatch, getState, Api) => {\n  return Api.get(`songs/searchAll/${searchText}`).then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: SEARCH_DATA,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const getActiveIndex = (index, queueSongs, queue) => dispatch => {\n  function arrayUnique(array) {\n    var a = array.concat();\n\n    for (var i = 0; i < a.length; ++i) {\n      for (var j = i + 1; j < a.length; ++j) {\n        if (a[i] === a[j]) a.splice(j--, 1);\n      }\n    }\n\n    return a;\n  }\n\n  var array1 = [\"Vijendra\", \"Singh\"];\n  var array2 = [\"Singh\", \"Shakya\"]; // Merges both arrays and gets unique items\n\n  var array3 = array1.concat(array2).unique();\n  var concatData = arrayUnique(queueSongs.concat(queue));\n  return dispatch({\n    type: ACTIVE_INDEX,\n    payload: index,\n    queue: concatData\n  });\n};\nexport const clearQueue = () => dispatch => {\n  return dispatch({\n    type: CLEAR_QUEUE,\n    payload: []\n  });\n};\nexport const downloadSong = id => (dispatch, getState, Api) => {// return Api.get(`songs/download/${id}`).then((response) => {\n  //   if (response.response.status === 200) {\n  //     dispatch({\n  //       type: DOWNLOAD_SONG,\n  //       payload: response.responseData,\n  //     });\n  //   }\n  //   return response;\n  // });\n};","map":{"version":3,"sources":["/Users/akashsuryavanshi/Dropbox/My Mac (Akashs-iMac.local)/Documents/Tunex Workspace/Git Repo/MusicApp/src/Actions/HomePageApi.jsx"],"names":["TOP_CHART_MUSIC","NEW_RELEASES","SONG_DATA","RETRO_CLASSIC","RADIO_MUSIC","FEATURE_ARTISTS","ARTIST_DETAILS","TOP_CHART","GENRES","GENRES_MUSIC","RETRO_CLASSIC_MUSIC","ALL_SONGS","SONG_TYPE_DATA","SEARCH_DATA","ACTIVE_INDEX","DOWNLOAD_SONG","CLEAR_QUEUE","fileDownload","download","topChartMusic","dispatch","getState","Api","get","then","response","status","type","payload","responseData","newReleaseMusic","setMusicData","index","retroClassicMusic","radioMusic","featureArtists","artistsDetails","artistName","getChartDetails","chartName","genres","genresMusic","genresType","retroClassic","hitsArtist","AllSongs","getSongsType","songType","getSearchAll","searchText","getActiveIndex","queueSongs","queue","arrayUnique","array","a","concat","i","length","j","splice","array1","array2","array3","unique","concatData","clearQueue","downloadSong","id"],"mappings":"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","sourcesContent":["import {\n  TOP_CHART_MUSIC,\n  NEW_RELEASES,\n  SONG_DATA,\n  RETRO_CLASSIC,\n  RADIO_MUSIC,\n  FEATURE_ARTISTS,\n  ARTIST_DETAILS,\n  TOP_CHART,\n  GENRES,\n  GENRES_MUSIC,\n  RETRO_CLASSIC_MUSIC,\n  ALL_SONGS,\n  SONG_TYPE_DATA,\n  SEARCH_DATA,\n  ACTIVE_INDEX,\n  DOWNLOAD_SONG,\n  CLEAR_QUEUE,\n} from \"../ActionTypes/ActionTypes\";\n\nimport fileDownload from \"js-file-download\";\nimport download from \"downloadjs\";\n\nexport const topChartMusic = () => (dispatch, getState, Api) => {\n  return Api.get(\"topcharts/all-top-charts\").then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: TOP_CHART_MUSIC,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const newReleaseMusic = () => (dispatch, getState, Api) => {\n  return Api.get(\"new-release/get-new-release\").then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: NEW_RELEASES,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const setMusicData = (payload, index) => (dispatch) => {\n  return dispatch({\n    type: SONG_DATA,\n    payload: { payload, index },\n  });\n};\n\nexport const retroClassicMusic = () => (dispatch, getState, Api) => {\n  return Api.get(\"retro-classic/get-retro-classic\").then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: RETRO_CLASSIC,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const radioMusic = () => (dispatch, getState, Api) => {\n  return Api.get(\"radio/get-radio\").then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: RADIO_MUSIC,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const featureArtists = () => (dispatch, getState, Api) => {\n  return Api.get(\"feature-artists/all-feature-artists\").then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: FEATURE_ARTISTS,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const artistsDetails = (artistName) => (dispatch, getState, Api) => {\n  return Api.get(`feature-artists/${artistName}`).then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: ARTIST_DETAILS,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const getChartDetails = (chartName) => (dispatch, getState, Api) => {\n  return Api.get(`topcharts/${chartName}`).then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: TOP_CHART,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const genres = () => (dispatch, getState, Api) => {\n  return Api.get(\"genres/all-genres\").then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: GENRES,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const genresMusic = (genresType) => (dispatch, getState, Api) => {\n  return Api.get(`genres/${genresType}`).then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: GENRES_MUSIC,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const retroClassic = (hitsArtist) => (dispatch, getState, Api) => {\n  return Api.get(`retro-classic/${hitsArtist}`).then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: RETRO_CLASSIC_MUSIC,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const AllSongs = () => (dispatch, getState, Api) => {\n  return Api.get(`genres/all-songs`).then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: ALL_SONGS,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const getSongsType = (songType) => (dispatch, getState, Api) => {\n  return Api.get(`songs/${songType}`).then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: SONG_TYPE_DATA,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const getSearchAll = (searchText) => (dispatch, getState, Api) => {\n  return Api.get(`songs/searchAll/${searchText}`).then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: SEARCH_DATA,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const getActiveIndex = (index, queueSongs, queue) => (dispatch) => {\n  function arrayUnique(array) {\n    var a = array.concat();\n    for (var i = 0; i < a.length; ++i) {\n      for (var j = i + 1; j < a.length; ++j) {\n        if (a[i] === a[j]) a.splice(j--, 1);\n      }\n    }\n    return a;\n  }\n  var array1 = [\"Vijendra\", \"Singh\"];\n  var array2 = [\"Singh\", \"Shakya\"];\n  // Merges both arrays and gets unique items\n  var array3 = array1.concat(array2).unique();\n  var concatData = arrayUnique(queueSongs.concat(queue));\n\n  return dispatch({\n    type: ACTIVE_INDEX,\n    payload: index,\n    queue: concatData,\n  });\n};\n\nexport const clearQueue = () => (dispatch) => {\n  return dispatch({\n    type: CLEAR_QUEUE,\n    payload: [],\n  });\n};\n\nexport const downloadSong = (id) => (dispatch, getState, Api) => {\n  // return Api.get(`songs/download/${id}`).then((response) => {\n  //   if (response.response.status === 200) {\n  //     dispatch({\n  //       type: DOWNLOAD_SONG,\n  //       payload: response.responseData,\n  //     });\n  //   }\n  //   return response;\n  // });\n};\n"]},"metadata":{},"sourceType":"module"}