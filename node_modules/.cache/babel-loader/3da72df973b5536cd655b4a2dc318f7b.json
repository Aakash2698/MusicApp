{"ast":null,"code":"import { TOP_CHART_MUSIC, NEW_RELEASES, SONG_DATA, RETRO_CLASSIC, RADIO_MUSIC, FEATURE_ARTISTS, ARTIST_DETAILS, TOP_CHART, GENRES, GENRES_MUSIC, RETRO_CLASSIC_MUSIC, ALL_SONGS, SONG_TYPE_DATA, SEARCH_DATA, ACTIVE_INDEX, DOWNLOAD_SONG } from \"../ActionTypes/ActionTypes\";\nexport const topChartMusic = () => (dispatch, getState, Api) => {\n  return Api.get(\"topcharts/all-top-charts\").then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: TOP_CHART_MUSIC,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const newReleaseMusic = () => (dispatch, getState, Api) => {\n  return Api.get(\"new-release/get-new-release\").then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: NEW_RELEASES,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const setMusicData = (payload, index) => dispatch => {\n  return dispatch({\n    type: SONG_DATA,\n    payload: {\n      payload,\n      index\n    }\n  });\n};\nexport const retroClassicMusic = () => (dispatch, getState, Api) => {\n  return Api.get(\"retro-classic/get-retro-classic\").then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: RETRO_CLASSIC,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const radioMusic = () => (dispatch, getState, Api) => {\n  return Api.get(\"radio/get-radio\").then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: RADIO_MUSIC,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const featureArtists = () => (dispatch, getState, Api) => {\n  return Api.get(\"feature-artists/all-feature-artists\").then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: FEATURE_ARTISTS,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const artistsDetails = artistName => (dispatch, getState, Api) => {\n  return Api.get(`feature-artists/${artistName}`).then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: ARTIST_DETAILS,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const getChartDetails = chartName => (dispatch, getState, Api) => {\n  return Api.get(`topcharts/${chartName}`).then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: TOP_CHART,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const genres = () => (dispatch, getState, Api) => {\n  return Api.get(\"genres/all-genres\").then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: GENRES,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const genresMusic = genresType => (dispatch, getState, Api) => {\n  return Api.get(`genres/${genresType}`).then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: GENRES_MUSIC,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const retroClassic = hitsArtist => (dispatch, getState, Api) => {\n  return Api.get(`retro-classic/${hitsArtist}`).then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: RETRO_CLASSIC_MUSIC,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const AllSongs = () => (dispatch, getState, Api) => {\n  return Api.get(`genres/all-songs`).then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: ALL_SONGS,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const getSongsType = songType => (dispatch, getState, Api) => {\n  return Api.get(`songs/${songType}`).then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: SONG_TYPE_DATA,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const getSearchAll = searchText => (dispatch, getState, Api) => {\n  return Api.get(`songs/searchAll/${searchText}`).then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: SEARCH_DATA,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};\nexport const getActiveIndex = index => dispatch => {\n  return dispatch({\n    type: ACTIVE_INDEX,\n    payload: index\n  });\n};\nexport const downloadSong = id => (dispatch, getState, Api) => {\n  return Api.get(`songs/download/${id}`).then(response => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: DOWNLOAD_SONG,\n        payload: response.responseData\n      });\n    }\n\n    return response;\n  });\n};","map":{"version":3,"sources":["/Users/akashsuryavanshi/Dropbox/My Mac (Akashs-iMac.local)/Documents/Tunex Workspace/Git Repo/MusicApp/src/Actions/HomePageApi.jsx"],"names":["TOP_CHART_MUSIC","NEW_RELEASES","SONG_DATA","RETRO_CLASSIC","RADIO_MUSIC","FEATURE_ARTISTS","ARTIST_DETAILS","TOP_CHART","GENRES","GENRES_MUSIC","RETRO_CLASSIC_MUSIC","ALL_SONGS","SONG_TYPE_DATA","SEARCH_DATA","ACTIVE_INDEX","DOWNLOAD_SONG","topChartMusic","dispatch","getState","Api","get","then","response","status","type","payload","responseData","newReleaseMusic","setMusicData","index","retroClassicMusic","radioMusic","featureArtists","artistsDetails","artistName","getChartDetails","chartName","genres","genresMusic","genresType","retroClassic","hitsArtist","AllSongs","getSongsType","songType","getSearchAll","searchText","getActiveIndex","downloadSong","id"],"mappings":"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","sourcesContent":["import {\n  TOP_CHART_MUSIC,\n  NEW_RELEASES,\n  SONG_DATA,\n  RETRO_CLASSIC,\n  RADIO_MUSIC,\n  FEATURE_ARTISTS,\n  ARTIST_DETAILS,\n  TOP_CHART,\n  GENRES,\n  GENRES_MUSIC,\n  RETRO_CLASSIC_MUSIC,\n  ALL_SONGS,\n  SONG_TYPE_DATA,\n  SEARCH_DATA,\n  ACTIVE_INDEX,\n  DOWNLOAD_SONG,\n} from \"../ActionTypes/ActionTypes\";\n\nexport const topChartMusic = () => (dispatch, getState, Api) => {\n  return Api.get(\"topcharts/all-top-charts\").then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: TOP_CHART_MUSIC,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const newReleaseMusic = () => (dispatch, getState, Api) => {\n  return Api.get(\"new-release/get-new-release\").then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: NEW_RELEASES,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const setMusicData = (payload, index) => (dispatch) => {\n  return dispatch({\n    type: SONG_DATA,\n    payload: { payload, index },\n  });\n};\n\nexport const retroClassicMusic = () => (dispatch, getState, Api) => {\n  return Api.get(\"retro-classic/get-retro-classic\").then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: RETRO_CLASSIC,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const radioMusic = () => (dispatch, getState, Api) => {\n  return Api.get(\"radio/get-radio\").then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: RADIO_MUSIC,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const featureArtists = () => (dispatch, getState, Api) => {\n  return Api.get(\"feature-artists/all-feature-artists\").then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: FEATURE_ARTISTS,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const artistsDetails = (artistName) => (dispatch, getState, Api) => {\n  return Api.get(`feature-artists/${artistName}`).then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: ARTIST_DETAILS,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const getChartDetails = (chartName) => (dispatch, getState, Api) => {\n  return Api.get(`topcharts/${chartName}`).then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: TOP_CHART,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const genres = () => (dispatch, getState, Api) => {\n  return Api.get(\"genres/all-genres\").then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: GENRES,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const genresMusic = (genresType) => (dispatch, getState, Api) => {\n  return Api.get(`genres/${genresType}`).then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: GENRES_MUSIC,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const retroClassic = (hitsArtist) => (dispatch, getState, Api) => {\n  return Api.get(`retro-classic/${hitsArtist}`).then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: RETRO_CLASSIC_MUSIC,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const AllSongs = () => (dispatch, getState, Api) => {\n  return Api.get(`genres/all-songs`).then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: ALL_SONGS,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const getSongsType = (songType) => (dispatch, getState, Api) => {\n  return Api.get(`songs/${songType}`).then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: SONG_TYPE_DATA,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const getSearchAll = (searchText) => (dispatch, getState, Api) => {\n  return Api.get(`songs/searchAll/${searchText}`).then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: SEARCH_DATA,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n\nexport const getActiveIndex = (index) => (dispatch) => {\n  return dispatch({\n    type: ACTIVE_INDEX,\n    payload: index,\n  });\n};\n\nexport const downloadSong = (id) => (dispatch, getState, Api) => {\n  return Api.get(`songs/download/${id}`).then((response) => {\n    if (response.response.status === 200) {\n      dispatch({\n        type: DOWNLOAD_SONG,\n        payload: response.responseData,\n      });\n    }\n    return response;\n  });\n};\n"]},"metadata":{},"sourceType":"module"}