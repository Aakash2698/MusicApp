{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/akashsuryavanshi/Dropbox/My Mac (Akashs-iMac.local)/Documents/Tunex Workspace/Git Repo/MusicApp/src/Components/ReusableComponents/image-cropper.jsx\";\nimport React from \"react\";\nimport Cropper from \"react-cropper\";\nimport \"cropperjs/dist/cropper.css\";\n\nclass MyCropper extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.cropImage = e => {\n      e.preventDefault();\n\n      if (typeof this.cropper.getCroppedCanvas() === \"undefined\") {\n        return;\n      }\n\n      var cropData = {\n        preview: this.cropper.getCroppedCanvas().toDataURL(),\n        data: this.cropper.getData(true)\n      };\n      this.setState({\n        preview: cropData.preview\n      });\n\n      if (cropData) {\n        this.props.handleCroppImage(cropData);\n      }\n    };\n\n    this.state = {\n      cropData: {},\n      preview: \"\"\n    }; // Listen for when the user is done cropping\n\n    window.addEventListener(\"cropend\", function (e) {\n      this.cropUpdate();\n    }.bind(this));\n    this.cropUpdate = this.cropUpdate.bind(this);\n  }\n  /**\n   * React 'componentDidMount'\n   * remove the event listener so it doesnt keep adding on top of itself\n   */\n\n\n  componentDidMount() {\n    window.removeEventListener(\"cropend\", this.cropper);\n  }\n  /**\n   * Set the component state based on the current crop selection\n   */\n\n\n  cropUpdate() {\n    if (this.cropper) {\n      if (typeof this.cropper.getCroppedCanvas() === \"undefined\") {\n        return;\n      }\n\n      this.setState({\n        cropData: {\n          preview: this.cropper.getCroppedCanvas().toDataURL(),\n          data: this.cropper.getData(true)\n        }\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-12\",\n        children: [/*#__PURE__*/_jsxDEV(Cropper, {\n          ref: cropper => {\n            this.cropper = cropper;\n          },\n          src: this.props.originalUploadFile,\n          className: \"cropper \",\n          viewMode: 1,\n          style: {\n            height: \"15rem\",\n            width: \"100%\",\n            margin: \"0 auto\"\n          },\n          minCropBoxWidth: 320,\n          minCropBoxHeight: 200,\n          cropBoxResizable: false // Cropper.js options\n          ,\n          aspectRatio: 16 / 10,\n          guides: false // crop={this.cropImage.bind(this)}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => this.cropImage(e),\n          className: \"btn btn-danger btn-sm cropper-submit m-t-15\\t\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-crop\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), \" Crop Image\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MyCropper;","map":{"version":3,"sources":["/Users/akashsuryavanshi/Dropbox/My Mac (Akashs-iMac.local)/Documents/Tunex Workspace/Git Repo/MusicApp/src/Components/ReusableComponents/image-cropper.jsx"],"names":["React","Cropper","MyCropper","Component","constructor","props","cropImage","e","preventDefault","cropper","getCroppedCanvas","cropData","preview","toDataURL","data","getData","setState","handleCroppImage","state","window","addEventListener","cropUpdate","bind","componentDidMount","removeEventListener","render","originalUploadFile","height","width","margin"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Cropper from \"react-cropper\";\nimport \"cropperjs/dist/cropper.css\";\n\nclass MyCropper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cropData: {},\n      preview: \"\",\n    };\n    // Listen for when the user is done cropping\n    window.addEventListener(\n      \"cropend\",\n      function(e) {\n        this.cropUpdate();\n      }.bind(this)\n    );\n    this.cropUpdate = this.cropUpdate.bind(this);\n  }\n  /**\n   * React 'componentDidMount'\n   * remove the event listener so it doesnt keep adding on top of itself\n   */\n  componentDidMount() {\n    window.removeEventListener(\"cropend\", this.cropper);\n  }\n  /**\n   * Set the component state based on the current crop selection\n   */\n  cropUpdate() {\n    if (this.cropper) {\n      if (typeof this.cropper.getCroppedCanvas() === \"undefined\") {\n        return;\n      }\n\n      this.setState({\n        cropData: {\n          preview: this.cropper.getCroppedCanvas().toDataURL(),\n          data: this.cropper.getData(true),\n        },\n      });\n    }\n  }\n  cropImage = (e) => {\n    e.preventDefault();\n    if (typeof this.cropper.getCroppedCanvas() === \"undefined\") {\n      return;\n    }\n    var cropData = {\n      preview: this.cropper.getCroppedCanvas().toDataURL(),\n      data: this.cropper.getData(true),\n    };\n    this.setState({\n      preview: cropData.preview,\n    });\n    if (cropData) {\n      this.props.handleCroppImage(cropData);\n    }\n  };\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <Cropper\n            ref={(cropper) => {\n              this.cropper = cropper;\n            }}\n            src={this.props.originalUploadFile}\n            className=\"cropper \"\n            viewMode={1}\n            style={{ height: \"15rem\", width: \"100%\", margin: \"0 auto\" }}\n            minCropBoxWidth={320}\n            minCropBoxHeight={200}\n            cropBoxResizable={false}\n            // Cropper.js options\n            aspectRatio={16 / 10}\n            guides={false}\n            // crop={this.cropImage.bind(this)}\n          />\n          <button\n            onClick={(e) => this.cropImage(e)}\n            className=\"btn btn-danger btn-sm cropper-submit m-t-15\t\"\n          >\n            <i className=\"fa fa-crop\"></i> Crop Image\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MyCropper;\n"]},"metadata":{},"sourceType":"module"}